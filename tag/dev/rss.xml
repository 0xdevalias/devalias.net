<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>devalias.net</title>
   
   <link>http://devalias.net</link>
   <description>Follow me into the rabbit hole that is my mind and learn about topics including.. security, technology, efficiency, biohacking, health, personal growth and probably a whole lot more.
</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>GraphQL: Why You Should Care</title>
	  <link>/devalias/2016/09/07/graphql-why-you-should-care/</link>
	  <author>devalias</author>
	  <pubDate>2016-09-07T00:00:00+10:00</pubDate>
	  <guid>/devalias/2016/09/07/graphql-why-you-should-care/</guid>
	  <description><![CDATA[
	     <p>If you haven&#39;t yet come across <a href="http://graphql.org/">GraphQL</a>, it&#39;s kind of exciting stuff. It&#39;s a query language developed by <a href="https://code.facebook.com/posts/">Facebook</a>, that basically lets you request exactly the data you need for the given task; no more, no less. Sounds good right?</p>

<h2>Tell me more..</h2>

<p>If you like to get into the nitty gritty of tech specs, you can head over to the <a href="https://facebook.github.io/graphql/">GraphQL Working Draft</a> (<a href="https://github.com/facebook/graphql">GitHub</a>) to have a deeper read, then play around with the <a href="https://github.com/graphql/graphql-js">reference implementation</a> in JavaScript.</p>

<p>Though if specs aren&#39;t really your style, check out &#39;<a href="https://learngraphql.com/">Learn GraphQL</a>&#39; and give their free short course a run through. Should get you up to speed!</p>

<h2>Ok. I&#39;m in!</h2>

<p>Excited? Want to dive into it? Need libraries for your particular tech stack? Head on over to the <a href="https://github.com/chentsulin/awesome-graphql">Awesome GraphQL</a> list. You&#39;re bound to find what you need!</p>

<p>For my particular tech palette I was after something <a href="http://scala-lang.org/">Scala&#39;esque</a>, maybe some <a href="http://doc.akka.io/docs/akka/2.4/scala/http/">Akka-HTTP</a> to go with it. Seems I wasn&#39;t the only one! <a href="http://sangria-graphql.org/">Sangria</a> (<a href="https://github.com/sangria-graphql/sangria">GitHub</a>) is a Scala GraphQL implementation. They even have <a href="https://github.com/sangria-graphql/sangria-akka-http-example">an Akka-HTTP based example</a>. Perfect! Throw in a little <a href="https://github.com/sangria-graphql/sangria-relay">Relay support</a> and this package is pretty much complete.</p>

<p>If you&#39;re looking for an all-in-one stack heading forward, I keep seeing a lot of good things posted by the team at <a href="http://www.apollostack.com/">Apollo Stack</a> (by the <a href="https://www.meteor.com/">Meteor</a> team), so would most definitely recommend keeping an eye on them. They also post a lot of really good articles <a href="https://medium.com/apollo-stack">on their blog</a> too.</p>

<p>For some further reading, make sure to check out:</p>

<ul>
<li><a href="https://medium.com/apollo-stack/tutorial-building-a-graphql-server-cddaa023c035">&quot;Tutorial: How to build a GraphQL server&quot; by Jonas Helfer</a></li>
</ul>

<h2><a name="graphql-relay-redux"></a>GraphQL and Relay.. What about Redux?</h2>

<p>A lot of things you&#39;ll read about GraphQL on the net will talk about it quite closely with <a href="https://facebook.github.io/relay/">Relay</a>, and given they were both released by Facebook, and sort of designed to work together, it makes a lot of sense. That said, you most definitely don&#39;t need to use Relay to take advantage of the awesomeness GraphQL provides!</p>

<p>KADIRA states it pretty well in <a href="https://kadira.io/blog/graphql/graphql-vs-relay">GraphQL vs Relay</a>:</p>

<blockquote>
<p>GraphQL provides a way to model and expose data in your app. You can use it on top of any kind of data source and use it with any kind of transport layer.</p>

<p>Relay is an efficient client-side data-fetching technology built for React. It talks to a GraphQL Schema to get data. Relay also has a server-side part that adds some features on top of GraphQL.</p>
</blockquote>

<p>There is a bunch of talk about how Relay is currently a pain to use, but Facebook seems to be <a href="https://facebook.github.io/react/blog/2016/08/05/relay-state-of-the-state.html">well aware of this issue</a> and has future plans to make it much nicer to work with.</p>

<p>I think it&#39;s definitely worth keeping an eye on Relay in the future, but if you&#39;re not quite ready to jump in, you can always take advantage of the benefits of GraphQL while sticking to something like <a href="http://redux.js.org/">Redux</a> (<a href="https://github.com/reactjs/redux">GitHub</a>). For further reading:</p>

<ul>
<li><a href="https://www.reindex.io/blog/redux-and-relay/">&quot;Comparing Redux and Relay&quot; by Mikhail Novikov</a></li>
<li><a href="https://medium.com/@matt.krick/replacing-relay-with-redux-2990c81aa807">&quot;Replacing Relay with Redux&quot; by Matt Krick</a></li>
<li><a href="https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56">&quot;Getting started with Redux and GraphQL&quot; by James Childs-Maidment</a></li>
<li><a href="http://www.apollostack.com/">Apollo Stack</a></li>
<li><a href="https://github.com/mattkrick/cashay">Cashay</a>: &quot;Relay for the rest of us&quot;</li>
<li><a href="https://github.com/gyzerok/adrenaline">Adrenaline</a>: &quot;Simple Relay alternative&quot;</li>
<li><a href="https://github.com/kennetpostigo/react-reach">React-Reach</a>: &quot;A small library for React to communicate with GraphQL&quot;</li>
</ul>

<h2>GraphQL vs Falcor</h2>

<p>So by now we should have a fairly good idea about what <a href="http://graphql.org/">GraphQL</a> is. So what&#39;s <a href="http://netflix.github.io/falcor/">Falcor</a>? This one comes from our friends over at <a href="http://techblog.netflix.com/">Netflix</a>. In essence, it turns all of your data sources into one giant JSON graph. Regardless of whether you&#39;re loading data remotely, have it cached locally, etc; you&#39;ll access it in the same way.</p>

<p>If you want to read deeper, I found these to be quite useful:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/32057785/what-is-the-difference-between-falcor-and-graphql">&quot;What is the difference between Falcor and GraphQL?&quot; on StackOverflow</a></li>
<li><a href="https://medium.com/apollo-stack/graphql-vs-falcor-4f1e9cbf7504">&quot;GraphQL vs. Falcor&quot; by Jonas Helfer</a></li>
<li><a href="http://react-etc.net/entry/beyond-rest-graphql-vs-falcor">&quot;Beyond REST: GraphQL vs. Falcor&quot; by React-Etc</a></li>
</ul>

<p>The consensus that I came to is that it seems to be on par with GraphQL in a number of ways, but is probably a bit easier to implement and a bit less powerful overall. Apparently you could even go so far as to <a href="http://hueypetersen.com/posts/2015/10/26/querying-graphql-with-falcor/">query GraphQL with Falcor</a>, but not the other way. For my purposes, I think I&#39;ll be sticking with GraphQL.</p>

<p>It&#39;s also worth noting that Facebook has been using various flavours of GraphQL for a few years now, whereas Netflix is yet to (or has only recently) started using Falcor in production.</p>

<h2>API&#39;s: REST, HATEOS, Observables.. GraphQL!</h2>

<p>I have read SO many articles over the years about the &#39;proper&#39; way to design API&#39;s, and why styleX is so much better than styleY. With so much info out there, and so much conflicting advice (even within each supposed style), it&#39;s really easy to get stuck in analysis paralysis.</p>

<p>Greg Ziegan put together a <a href="https://medium.com/@gregoryziegan/how-graphql-taught-me-to-code-client-apps-1c631a9953bd">nice little article</a> talking about his progression along this path: from REST, through <a href="http://timelessrepo.com/haters-gonna-hateoas">HATEOS</a>, observables, etc; and how he ended up at GraphQL. Following on from this, Sashko Stubailo makes a pretty good argument about why GraphQL is <a href="https://medium.com/apollo-stack/graphql-the-next-generation-of-api-design-f24b1689756a">&quot;the next generation of API design&quot;</a>.</p>

<p>While the benefits of a GraphQL-based API seem pretty obvious to me, it&#39;s not always feasible to jump straight into shiny new tech. Maybe you need to support legacy services, interact with 3rd-party API&#39;s, or allow other developers to consume your API without them having to learn the ins and outs of GraphQL. But thankfully, we don&#39;t need to pick one over the other!</p>

<p>The GraphQL team have a pretty good article on their blog about <a href="http://graphql.org/blog/rest-api-graphql-wrapper/">wrapping REST API&#39;s in GraphQL</a>, starting purely with the client-side, and later moving it to the backend. This idea plays in SO well with some little side-projects I&#39;ve been thinking about over the years, and how it could be used to help decompose and combine existing API&#39;s.</p>

<h2>Conclusion</h2>

<p>This is a scattering of the articles and things I have read through while learning more about GraphQL, and why it is so awesome. I definitely know it&#39;s a technology that I am super excited to start utilising in my future projects.</p>

<p>Have you come across any other awesome articles/tools related to GraphQL or similar? I&#39;d love to hear about them! Let me know in the comments below.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Shared Devices Need Account Switching</title>
	  <link>/devalias/2016/08/31/shared-devices-need-account-switching/</link>
	  <author>devalias</author>
	  <pubDate>2016-08-31T00:00:00+10:00</pubDate>
	  <guid>/devalias/2016/08/31/shared-devices-need-account-switching/</guid>
	  <description><![CDATA[
	     <p>Living in share houses and using tech like the Apple TV has highlighted an annoying situation: so many apps these days want you to sign in to enable access, personalised features, etc; but most offer no good solution for when you share the device with other people.</p>

<p>There are some apps out there that handle this pretty well:</p>

<ul>
<li><a href="https://www.plex.tv/">Plex</a> allows you to switch between different users in your &#39;home&#39;, each of which can either be a fully independent account, or a &#39;managed user&#39; that exists under the main account.</li>
<li><a href="https://www.netflix.com/au/">Netflix</a> allows switching between different users under the one subscription. While this is ok.. it doesn&#39;t work so well for a share house. What if we each have our own Netflix subscriptions, but want to share the device without having to log out and back in to our own accounts?</li>
</ul>

<p>And then there are so many apps that don&#39;t even seem to give the option, two of which immediately jump to mind for me:</p>

<ul>
<li><a href="https://www.youtube.com/">YouTube</a> let&#39;s you sign in to a single account, but no switching features save for logging out.</li>
<li><a href="https://www.ted.com/">TED</a>&#39;s app suffers from the same issue.</li>
</ul>

<p>This could be fixed at the individual app level. It would be REALLY nice to see support for multiple account switching added to any app made for a device that could potentially be shared (Apple TV/etc, far less likely to be useful on an iPhone.. but it might be for some users) But this requires extra effort from every app developer out there. Perhaps a common framework could be developed to help support this.. but then making it generic enough to fit into everyone&#39;s different architectures would be a challenge.</p>

<p>An even better solution could be baked into the OS itself by Apple.. I boot up my Apple TV and am presented with an account chooser asking which particular registered user I am. If I haven&#39;t already logged in, there&#39;s the option for signing in to my Apple account to add myself as a new user. Once logged in, I&#39;m presented with my own homescreen of apps, laid out to my own preferences, logged in to my own accounts, and saving my own personal data.</p>

<p>This poses some issues about duplication of apps between users, space requirements, etc. So a mid-ground could be allowing the owner/&#39;master&#39; user to control app installation, but then for each other user to be able to maintain their own stored data/signin status/etc.</p>

<p>What do you think? Is this a feature you&#39;d use, or does it just seem like over-engineered bloat? Let me know your thoughts in the comments!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Starting a New Web Application (Part 1): An Exploration of Options</title>
	  <link>/devalias/2016/08/24/starting-a-new-web-application-1-an-exploration-of-options/</link>
	  <author>devalias</author>
	  <pubDate>2016-08-24T00:00:00+10:00</pubDate>
	  <guid>/devalias/2016/08/24/starting-a-new-web-application-1-an-exploration-of-options/</guid>
	  <description><![CDATA[
	     <p>Finding myself with some free time (and looking into starting a new project), I thought I might catch myself up on the state of web technologies, and what might be a good stack to work with.</p>

<p>The details collected here are most certainly not a complete layout of the entire landscape, and there will no doubt be leanings toward my personal tastes (<a href="http://www.reactivemanifesto.org/">reactive</a>, api-driven, etc). You should use this more as a starter into your own deeper research than as a source of ultimate truth. With that out of the way, let&#39;s get into it!</p>

<p><strong>Quicklinks</strong></p>

<ul>
<li><a href="#frontend">Frontend</a>

<ul>
<li><a href="#frontend-frameworks">Frameworks</a></li>
<li><a href="#frontend-ui">UI</a></li>
<li><a href="#frontend-scripting">Scripting</a></li>
</ul></li>
<li><a href="#backend">Backend</a></li>
<li><a href="#tooling">Tooling</a></li>
<li><a href="#conclusions">Conclusions</a></li>
<li><a href="#updates">Updates</a></li>
</ul>

<h2><a name="frontend"></a>Frontend</h2>

<p>The frontend is the pretty, interactive, main part that people will be seeing. You can have the most amazingly streamlined and perfect backend code, but noone&#39;s going to notice and love it without a strong frontend to back it up.</p>

<p><strong><a name="frontend-frameworks"></a>Frameworks</strong></p>

<p>The days of raw JavaScript and jQuery selectors is long gone. We&#39;re looking for a nice, modern framework to help put together our frontend. Here&#39;s a little selection of some of our options:</p>

<ul>
<li><a href="https://facebook.github.io/react/">React</a> (<a href="https://github.com/reactjs">GitHub</a>) (most likely with a flavour of <a href="https://facebook.github.io/flux/">Flux</a> (<a href="https://github.com/facebook/flux">GitHub</a>))

<ul>
<li>A frontend framework from Facebook that is taking the web by storm. Probably my personal favourite from what I&#39;ve seen so far.</li>
<li>It even let&#39;s you <a href="https://facebook.github.io/react-native/">build for native devices</a>!</li>
</ul></li>
<li><a href="https://angular.io/">Angular (v2)</a> (or if you like outdated for some reason <a href="https://angularjs.org/">AngularJS (v1)</a>)

<ul>
<li>Also <a href="https://mobile.angular.io/">available for native devices</a></li>
<li>I was a big fan of AngularJS (v1), and I want to like v2, but I don&#39;t think it will be my main choice.</li>
</ul></li>
<li>There are a TON of other frontend frameworks, of varying popularity and support. I won&#39;t delve into them much, but there&#39;s heaps of info out there

<ul>
<li><a href="http://emberjs.com/">Ember</a></li>
<li><a href="https://vuejs.org/">Vue.js</a>

<ul>
<li>From reading around the web, there&#39;s a decent amount of good stuff talking about Vue. In the end I decided against it since it&#39;s not supported by a big backer, and the skills aren&#39;t as useful on a resume. That said, for a personal project it could be a great fit!</li>
<li><a href="https://vuejs.org/guide/comparison.html">https://vuejs.org/guide/comparison.html</a></li>
<li><a href="http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/">http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/</a></li>
<li><a href="http://vuejs.org/2016/04/27/announcing-2.0/">http://vuejs.org/2016/04/27/announcing-2.0/</a></li>
<li><a href="https://github.com/vuejs/vue">vue</a>, <a href="https://github.com/vuejs/vue-rx">vue-rx</a>, <a href="https://github.com/vuejs/vue-resource">vue-resource</a>, <a href="https://github.com/vuejs/vue-router">vue-router</a>, <a href="https://github.com/vuejs/vuex">vuex</a>, <a href="https://github.com/revue/revue">revuew</a></li>
</ul></li>
<li><a href="http://aurelia.io/">Aurelia</a></li>
<li><a href="http://riotjs.com/">Riot</a> (<a href="https://muut.com/blog/technology/riot-2.0/">v2</a>)</li>
</ul></li>
</ul>

<p>As with most things, every man and his dog has their own opinion, so here are a few comparisons I found useful:</p>

<ul>
<li><a href="https://www.ociweb.com/resources/publications/sett/comparison-of-angular-2-and-react/">&quot;Comparison of Angular 2 and React&quot; by Mark Volkmann and Lance Finney</a></li>
<li><a href="http://blog.backand.com/angular-2-vs-react/">&quot;Angular 2 vs. React&quot; by Itay Herskovits</a></li>
<li><a href="https://medium.freecodecamp.com/angular-2-versus-react-there-will-be-blood-66595faafd51">&quot;Angular 2 versus React: There Will Be Blood&quot; by Cory House</a></li>
<li><a href="https://rlafranchi.github.io/2016/05/03/vue-vs-react/">&quot;Vue.js vs React.js&quot; by Richard LaFranchi</a></li>
<li><a href="https://forums.meteor.com/t/why-doesnt-mdg-just-adopt-vue-js-and-forget-about-react-vs-blaze/13926/6">&quot;Why doesn’t MDG just adopt Vue.js and forget about React vs Blaze?&quot;</a></li>
</ul>

<p><strong><a name="frontend-ui"></a>UI</strong></p>

<p>Even if you like to go oldschool and code your site by hand in notepad/vi, you can&#39;t deny the ease/benefits of using a frontend UI framework.</p>

<ul>
<li><a href="https://getbootstrap.com/">Bootstrap</a> (<a href="https://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha/">v4</a>)

<ul>
<li>Released by Twitter, and arguably one of the most used frontend UI frameworks out there.</li>
<li><a href="https://react-bootstrap.github.io/">React-Bootstrap</a> (<a href="https://github.com/react-bootstrap/react-bootstrap">GitHub</a>)</li>
<li><a href="https://ng-bootstrap.github.io/#/home">ng-bootstrap</a> by the angular-ui team (<a href="https://github.com/ng-bootstrap/ng-bootstrap">GitHub</a>)</li>
<li><a href="https://valor-software.com/ng2-bootstrap/">ng2-bootstrap</a> by valor-software (<a href="https://github.com/valor-software/ng2-bootstrap">GitHub</a>)</li>
</ul></li>
<li><a href="http://foundation.zurb.com/">Foundation</a>

<ul>
<li>While not as well known as the other two mentioned here, those that make use of foundation swear by it.</li>
<li><a href="https://react.foundation/">React-Foundation</a> (<a href="https://github.com/nordsoftware/react-foundation">GitHub</a>)</li>
<li><a href="https://aruberto.github.io/react-foundation-components/">React-Foundation-Components</a></li>
</ul></li>
<li><a href="https://material.google.com/">Material Design</a>

<ul>
<li>Following a set of design principals from Google, this lays out a slick, consistent look and feel.</li>
<li><a href="https://getmdl.io/">Material Design Lite</a></li>
<li><a href="http://www.material-ui.com/">For React</a> (<a href="https://github.com/callemall/material-ui">GitHub</a>)</li>
<li><a href="https://material.angular.io/">For Angular (v2)</a> (<a href="https://github.com/angular/material2">GitHub</a>)</li>
<li><a href="https://material.angularjs.io/">For AngularJS (v1)</a> (<a href="https://github.com/angular/material">GitHub</a>)</li>
</ul></li>
</ul>

<p>Can&#39;t decide? Try some comparisons:</p>

<ul>
<li><a href="http://blog.teamtreehouse.com/the-rundown-bootstrap-vs-google-mdl-vs-foundation">&quot;The Rundown: Bootstrap vs. Google MDL vs. Foundation&quot; by treehouse</a></li>
<li><a href="https://dannyherran.com/2016/03/state-of-affairs-bootstrap-4-vs-foundation-6/">&quot;State of affairs: Bootstrap 4 vs Foundation 6.2&quot; by Danny Herran</a></li>
</ul>

<p><strong><a name="frontend-scripting"></a>Scripting</strong></p>

<p>Modern web apps live by the functionality they enable in the browser, and to do this, we need a JS-esque language. Your chosen frontend framework may sway your choice (eg. Angular (v2) has a strong preference for TypeScript), but ultimately, it&#39;s up to what you/your team feel comfortable with. With <a href="https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js">so many options</a> out there, it&#39;s hard to pick.. And of course, you could always stick to plain JavaScript.. and with the new features coming in <a href="http://es6-features.org/">ES6</a> (eg. <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">promises</a>) and beyond, it might be a good choice.</p>

<ul>
<li><a href="https://babeljs.io/">Babel</a>

<ul>
<li>A transpiler that lets you play with all the fun features of JavaScript ES6 and beyond, while maintaining compatibility with all of the older browsers.</li>
</ul></li>
<li><a href="https://www.typescriptlang.org/">TypeScript</a> (<a href="https://github.com/Microsoft/TypeScript">GitHub</a>)

<ul>
<li>&quot;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript&quot;</li>
<li>If you&#39;re using Angular (v2) and like sticking to convention, this is the one for you.</li>
</ul></li>
<li><a href="http://coffeescript.org/">CoffeeScript</a> (or maybe <a href="https://github.com/michaelficarra/CoffeeScriptRedux">v2</a>)

<ul>
<li>This used to be my choice, but looking at the other options available now, I think i&#39;ll be moving on.</li>
<li>As always, there are a bunch of arguments for and against..

<ul>
<li><a href="https://robots.thoughtbot.com/replace-coffeescript-with-es6">&quot;Replace CoffeeScript with ES6&quot; by Blake Williams</a></li>
<li><a href="http://tech.noredink.com/post/111583727108/dont-replace-coffeescript-with-es6-transpilers">&quot;Don’t Replace CoffeeScript with ES6 Transpilers&quot; by Richard Feldman</a></li>
<li>etc</li>
</ul></li>
<li>If you&#39;re looking for a way out, why not <a href="https://github.com/decaffeinate/decaffeinate">decaffeinate</a>?</li>
</ul></li>
<li><a href="https://flowtype.org/">Flow</a> (<a href="https://github.com/facebook/flow">GitHub</a>)

<ul>
<li>While it&#39;s not a language unto itself, it does allow you the benefits of typed JavaScript without having to dive into something like TypeScript.</li>
</ul></li>
<li><a href="https://www.scala-js.org/">Scala.js</a>

<ul>
<li>A little left field, this transpiles Scala code into JavaScript. While I probably wouldn&#39;t see myself using this as a main choice, it could make for some interesting reusability between front and backend.</li>
</ul></li>
</ul>

<h2><a name="backend"></a>Backend</h2>

<p>My preferences for backend tech stacks lean heavily towards <a href="http://www.scala-lang.org/">Scala</a> and the <a href="https://www.lightbend.com/platform">Lightbend Reactive Platform</a> these days, but I will make quick mention of some of the other options available.</p>

<ul>
<li><a href="http://doc.akka.io/docs/akka-http/current/scala.html">Akka-HTTP</a>

<ul>
<li>Taking the power of asynchronous, message based actors, and applying them to HTTP. Definite win.</li>
<li><a href="https://softwaremill.github.io/bootzooka/">Bootzooka</a> (<a href="https://github.com/softwaremill/bootzooka">GitHub</a>)

<ul>
<li>&quot;Bootzooka is a simple application scaffolding project to allow quick start of development for modern, web based applications.&quot;</li>
<li>While not perfect, it&#39;s a decent implementation of a starter app, tying together some useful technologies.</li>
</ul></li>
</ul></li>
<li><a href="https://www.playframework.com/">Play Framework</a>

<ul>
<li>&quot;Play is a high-productivity Java and Scala web application framework that integrates the components and APIs you need for modern web application development.&quot;</li>
</ul></li>
<li><a href="http://scalatra.org/">Scalatra</a>

<ul>
<li>&quot;Scalatra is a simple, accessible and free web micro-framework. It combines the power of the JVM with the beauty and brevity of Scala, helping you quickly build high-performance web sites and APIs.&quot;</li>
</ul></li>
<li><a href="https://liftweb.net/">Lift</a> (<a href="https://github.com/lift/framework">GitHub</a>)

<ul>
<li>&quot;Lift is the most powerful, most secure web framework available today. There are Seven Things that distinguish Lift from other web frameworks.&quot;</li>
</ul></li>
<li><a href="http://http4s.org/">http4s</a> (<a href="https://github.com/http4s/http4s">GitHub</a>)

<ul>
<li>&quot;A typeful, purely functional, streaming library for HTTP clients and servers in Scala.&quot;</li>
</ul></li>
<li><a href="https://twitter.github.io/finatra/">Finatra</a>

<ul>
<li>&quot;Fast, testable, Scala services built on TwitterServer and Finagle.&quot;</li>
</ul></li>
<li><a href="https://github.com/airbnb/hypernova">Hypernova</a>

<ul>
<li>&quot;A service for server-side rendering your JavaScript views&quot;</li>
<li>While not a choice unto itself, this should help speed things up and keep your site nice and search engine friendly.</li>
</ul></li>
<li>There will be a number of opinions spread throughout the net, including:

<ul>
<li><a href="https://scala.libhunt.com/categories/585-web-frameworks">https://scala.libhunt.com/categories/585-web-frameworks</a></li>
<li><a href="https://www.reddit.com/r/scala/comments/3kaael/which_framework_to_use_for_development_of_a_rest/">https://www.reddit.com/r/scala/comments/3kaael/which_framework_to_use_for_development_of_a_rest/</a></li>
<li><a href="https://www.quora.com/Is-Play-the-best-web-framework-written-in-Scala">https://www.quora.com/Is-Play-the-best-web-framework-written-in-Scala</a></li>
</ul></li>
<li>You also have all of your other typical options

<ul>
<li><a href="https://www.ruby-lang.org/en/">Ruby</a>

<ul>
<li><a href="http://rubyonrails.org/">Ruby on Rails</a></li>
<li><a href="http://www.sinatrarb.com/">Sinatra</a></li>
</ul></li>
<li><a href="https://nodejs.org/en/">Node</a>

<ul>
<li><a href="http://expressjs.com/">Express</a>: &quot;Fast, unopinionated, minimalist web framework for Node.js&quot;</li>
<li><a href="https://www.meteor.com/">Meteor</a>: &quot;Meteor is an open source platform for web, mobile, and desktop.&quot;</li>
<li><a href="http://noeticforce.com/best-nodejs-frameworks-for-web-and-app-development">&quot;Node.js Frameworks: The 10 Best for Web and Apps Development&quot; by noeticsunil</a>
mobile, and desktop.&quot;</li>
</ul></li>
<li><a href="https://www.python.org/">Python</a>

<ul>
<li><a href="https://www.djangoproject.com/">Django</a></li>
<li><a href="https://wiki.python.org/moin/WebFrameworks">Web Frameworks for Python</a></li>
</ul></li>
<li><a href="https://secure.php.net/">PHP</a>

<ul>
<li><a href="https://octobercms.com/">October</a>: &quot;October is a free, open-source, self-hosted CMS platform based on the Laravel PHP Framework. A simple and modular CMS that grows with you, with a precise and beautiful interface that comes as second nature.&quot;</li>
<li><a href="https://laravel.com/">Laravel</a></li>
</ul></li>
<li>etc</li>
</ul></li>
</ul>

<h2><a name="tooling"></a>Tooling</h2>

<p>With the crazy mix of technologies and steps involved in modern web app development, it makes a ton of sense to tie it all together with some automation.</p>

<ul>
<li><a href="https://webpack.github.io/">Webpack</a> (<a href="https://github.com/webpack/webpack">GitHub</a>)

<ul>
<li>&quot;Webpack is a bundler for modules. The main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.&quot;</li>
<li><a href="http://blog.andrewray.me/webpack-when-to-use-and-why/">&quot;Webpack: When To Use And Why&quot; by Andrew Ray</a></li>
<li><a href="https://github.com/webpack/less-loader">https://github.com/webpack/less-loader</a></li>
<li><a href="https://github.com/shakacode/bootstrap-loader">https://github.com/shakacode/bootstrap-loader</a></li>
</ul></li>
<li><a href="http://gulpjs.com/">Gulp</a> (<a href="https://github.com/gulpjs/gulp">GitHub</a>

<ul>
<li>Gulp is a streaming javascript task runner that lets you automate tasks.</li>
</ul></li>
<li><a href="http://gruntjs.com/">Grunt</a> (<a href="https://github.com/gruntjs/">GitHub</a>)

<ul>
<li>Grunt is basically the older, less streaming, less awesome version of Gulp.</li>
</ul></li>
</ul>

<p>While a little different in purpose to the things mentioned above, getting everything nicely tested and deployed is always good:</p>

<ul>
<li><a href="https://bitbucket.org/product/features/pipelines">Bitbucket Pipelines</a>: &quot;Build, test and deploy from Bitbucket&quot;</li>
</ul>

<h2><a name="conclusions"></a>Conclusions</h2>

<p>Hopefully this has given you a decent starting point for figuring out what combination of technologies is going to work best for your next project. If you want to see the direction I&#39;ve decided to go, make sure you read on in <a href="#TODO">Part 2</a>.</p>

<p>Have I missed something important? Not given love to your favourite stack? Got a cool pointer? Or just want to say hi? Let me know in the comments!</p>

<h2><a name="updates"></a>Updates</h2>

<ul>
<li>20170411 Added some more backend web frameworks, updated akka-http link, fixed some formatting</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Resolutions for 11111011100 [2012]</title>
	  <link>/devalias/2012/01/04/resolutions-for-11111011100-2012/</link>
	  <author>devalias</author>
	  <pubDate>2012-01-04T10:31:00+11:00</pubDate>
	  <guid>/devalias/2012/01/04/resolutions-for-11111011100-2012/</guid>
	  <description><![CDATA[
	     <p>So here comes the obligatory post about my resolutions for 2012. In no particular order or level of detail:</p>

<ul>
<li>Spend more time hanging out and chatting with friends. Those who are physically close as well as those far away; in person, on the phone and online; those who I am close to and those I should be closer with.</li>
<li>Put more time into coding/web design/development tasks with the aim of getting at least 1 app out this year.</li>
<li>Open source anything and everything I do that isn&#39;t a &#39;trade secret&#39; (More on this to come later). Who knows what people will be able to find a use for. Also contribute back anything I can to open source projects I use.</li>
<li>Continue to read, learn and grow; be it in technical skill, learning about myself, or the world; and share what I learn with everyone and anyone who is interested. (Essentially open source whatever knowledge I gain)</li>
<li>Be more forward and take (calculated) risks even when they seem scary. (Talking to someone new/interesting/cute, giving that project a go, etc)</li>
</ul>

<p>This one isn&#39;t a resolution so much as a goal but a notable thing to do in any case:</p>

<ul>
<li>Ensure all of my hard drives utilise full disk encryption, using a strong password. &#39;&#39;The man&#39; thinks he is too good these days, so why not stick it to him in a simple, fun, and secure way. (See the article on EFF.org)</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
