<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>devalias.net</title>
   
   <link>http://devalias.net</link>
   <description>Follow me into the rabbit hole that is my mind and learn about topics including.. security, technology, efficiency, biohacking, health, personal growth and probably a whole lot more.
</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Starting a New Web Application (Part 2): A Time to React</title>
	  <link>/devalias/2016/10/13/starting-a-new-web-application-2-a-time-to-react/</link>
	  <author>devalias</author>
	  <pubDate>2016-10-13T10:39:15+11:00</pubDate>
	  <guid>/devalias/2016/10/13/starting-a-new-web-application-2-a-time-to-react/</guid>
	  <description><![CDATA[
	     <p>In <a href="TODO">part 1</a> we started looking into the current web application landscape, and what technologies are out there. From what I learned through my research there, I have decided to delve further into <a href="https://facebook.github.io/react/">React</a>; partly because it&#39;s one of the current hot topics and seems really interesting, partly because I think Facebook are pretty cool and make some awesome things, and partly because it&#39;ll be a good skill to flesh out for my resume/future endeavours.</p>

<h2>ToC</h2>

<ul>
<li><a href="#introductory-reading">Introductory Reading</a></li>
<li><a href="#desired-features">Desired Features</a></li>
<li><a href="#react">React</a></li>
<li><a href="#flux">Flux</a></li>
<li><a href="#libraries-features">Libraries and Features</a>

<ul>
<li>Routing</li>
<li>API&#39;s (REST, etc)</li>
<li>Authentication</li>
<li>Isomorphic</li>
<li>DevTools</li>
</ul></li>
<li><a href="#boilerplate-starters-examples">Boilerplate, Starter Kits and Examples</a></li>
<li><a href="#stack-tools">Choosing my Stack and Tools</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2><a name="introductory-reading"></a>Introductory Reading</h2>

<p>To save myself rewriting what&#39;s already been explained, here are some quick intro articles on React, Flux and JSX that helped my to understand it all a bit better. If you need a quick refresher, I&#39;ll see you in a minute:</p>

<ul>
<li><a href="http://blog.andrewray.me/reactjs-for-stupid-people/">&quot;ReactJS For Stupid People&quot; by Andrew Ray</a></li>
<li><a href="http://blog.andrewray.me/flux-for-stupid-people/">&quot;Flux For Stupid People&quot; by Andrew Ray</a></li>
<li><a href="http://blog.andrewray.me/youre-missing-the-point-of-jsx/">&quot;You&#39;re Missing The Point Of JSX&quot; by Andrew Ray</a></li>
<li><a href="https://facebook.github.io/react/docs/getting-started.html">React: Getting Started</a></li>
<li><a href="https://facebook.github.io/react/docs/tutorial.html">React: Tutorial</a></li>
<li><a href="https://www.toptal.com/react/navigating-the-react-ecosystem">&quot;Navigating the React Ecosystem&quot; by Tomas Holas</a></li>
</ul>

<h2><a name="desired-features"></a>Desired Features</h2>

<p>To help narrow down which libraries/solutions I might go with, it helped to have a bit of an idea of what sort of features/ideas I wanted to incorporate into my stack. In no particular order:</p>

<ul>
<li>Single page application</li>
<li>Driven by a first-class API</li>
<li>Microservices</li>
<li>Token-based Authentication</li>
<li><a href="https://medium.com/front-end-hacking/the-secret-to-organization-in-functional-programming-913484e85fc9">&#39;Feature First&#39; Organization</a></li>
<li><a href="http://www.reactivemanifesto.org/">Reactive</a></li>
<li><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">&#39;DRY&#39;</a></li>
<li><a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/">Isomorphic</a>?</li>
</ul>

<h2><a name="react"></a>React</h2>

<p>This one is nice and simple. <a href="https://facebook.github.io/react/">React</a> is React. We don&#39;t have a crazy environment of different options, flavours and alternatives we need to weigh up and choose between here.</p>

<blockquote>
<p>React is a JavaScript library for creating user interfaces by Facebook and Instagram. Many people choose to think of React as the V in MVC. - <a href="https://facebook.github.io/react/docs/why-react.html">Why React?</a></p>
</blockquote>

<p>If you need to know more about it, make sure to go back and brush up on the <a href="#introductory-reading">introductory reading</a>.</p>

<h2><a name="flux"></a>Flux</h2>

<p><a href="https://facebook.github.io/flux/">Flux</a> (<a href="https://github.com/facebook/flux">GitHub</a>) is a concept <a href="https://facebook.github.io/react/blog/2014/05/06/flux.html">announced back in 2014</a> by Facebook. Since it isn&#39;t a library like React, there are SO many flavours, choices and differing implementations. You could be stuck here in analysis paralysis forever.</p>

<blockquote>
<p>Flux is the application architecture that Facebook uses for building client-side web applications. It complements React&#39;s composable view components by utilizing a unidirectional data flow. It&#39;s more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code. - <a href="https://facebook.github.io/flux/docs/overview.html">Flux Overview</a></p>
</blockquote>

<p>Thankfully a whole pile of different people have already put together some comparisons of different implementations, and why you might want to pick one over another:</p>

<ul>
<li><a href="https://github.com/kriasoft/react-starter-kit/issues/22">&quot;Which Flux implementation should I use?&quot; on react-starter-kit</a></li>
<li><a href="http://pixelhunter.me/post/110248593059/flux-solutions-compared-by-example">&quot;Flux solutions compared by example&quot; by pixelhunter</a> (<a href="https://github.com/voronianski/flux-comparison">GitHub</a>)</li>
</ul>

<p>There are <a href="https://github.com/justinwoo/react-rxjs-flow">even</a> <a href="http://qiita.com/kimagure/items/22cf4bb2a967fcba376e">some</a> <a href="https://github.com/AlexMost/RxReact">people</a> playing with the idea of skipping Flux entirely and using <a href="https://github.com/Reactive-Extensions/RxJS">RxJS</a>.</p>

<p>Reading through the various options out there, I pretty much came to the conclusion that I probably want to be looking at <a href="https://facebook.github.io/relay/">Relay</a> by Facebook (<a href="https://github.com/facebook/relay">GitHub</a>, <a href="https://github.com/relayjs/relay-starter-kit">Starter Kit</a>) and <a href="http://redux.js.org/">Redux</a> (<a href="https://github.com/reactjs/redux">GitHub</a>). I&#39;ve briefly spoken about these two before in <a href="/devalias/2016/09/07/graphql-why-you-should-care/#graphql-relay-redux">&quot;GraphQL: Why You Should Care&quot;</a>. But for the sake of completeness, here are the relevant articles again:
* <a href="https://www.reindex.io/blog/redux-and-relay/">&quot;Comparing Redux and Relay&quot; by Mikhail Novikov</a>
* <a href="https://medium.com/@matt.krick/replacing-relay-with-redux-2990c81aa807">&quot;Replacing Relay with Redux&quot; by Matt Krick</a>
* <a href="https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56">&quot;Getting started with Redux and GraphQL&quot; by James Childs-Maidment</a></p>

<p>While I think Relay is pretty cool, and seems like it will <a href="https://facebook.github.io/react/blog/2016/08/05/relay-state-of-the-state.html">only keep getting better</a>, I think sticking to a Redux based stack for the time being will suit my needs better. Though don&#39;t think that leaves you missing out. There are a number of projects that combine the best aspects of both worlds:</p>

<ul>
<li><a href="http://www.apollostack.com/">Apollo Stack</a></li>
<li><a href="https://github.com/mattkrick/cashay">Cashay</a>: &quot;Relay for the rest of us&quot;</li>
<li><a href="https://github.com/gyzerok/adrenaline">Adrenaline</a>: &quot;Simple Relay alternative&quot;</li>
<li><a href="https://github.com/kennetpostigo/react-reach">React-Reach</a>: &quot;A small library for React to communicate with GraphQL&quot;</li>
</ul>

<p>There also seems to be some pretty lively discussions worth watching as well:</p>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/464">Redux #464: &quot;Relay and Redux&quot;</a></li>
<li><a href="https://github.com/reactjs/redux/issues/775">Redux #775: &quot;Has Redux&#39;s Time Come and Gone&quot; </a></li>
</ul>

<p>A nice feature of Redux is that it <a href="http://redux.js.org/docs/basics/UsageWithReact.html">isn&#39;t just tied to React</a>; so you can write Redux apps with <a href="https://github.com/reactjs/react-redux">React</a>, <a href="https://github.com/angular-redux">Angular</a>, <a href="http://www.ember-redux.com/">Ember</a>, jQuery, or even vanilla JavaScript.</p>

<p>The best way to learn about Redux, how it works, and why you should care, is through the official (free) course: <a href="https://egghead.io/courses/getting-started-with-redux">&quot;Getting Started with Redux&quot;</a> (<a href="https://github.com/tayiorbeii/egghead.io_redux_course_notes">Notes</a>)</p>

<p>Finally, while it might be a little early to throw this into the mix, for the sake of completeness in &#39;interesting things I read on this topic&#39;:</p>

<ul>
<li><a href="http://jamesknelson.com/join-the-dark-side-of-the-flux-responding-to-actions-with-actors/">&quot;Join The Dark Side Of The Flux: Responding to Actions with Actors&quot; by James K Nelson</a></li>
</ul>

<h2><a name="libraries-features"></a>Libraries and Features</h2>

<p>Following the DRY principles, there are bound to be tons of pre-existing libraries to help implement all sorts of features you may want/need. While it&#39;s always hard to truly know what you want till you get started, you could start by looking through some <a href="https://github.com/enaqx/awesome-react">awesome react</a>/<a href="https://github.com/jondot/awesome-react-native">react native</a> lists; or read on below.</p>

<p><strong>Routing</strong></p>

<ul>
<li><a href="https://github.com/reactjs/react-router">React-Router</a>: This seems to be the de-facto standard.

<ul>
<li><a href="https://github.com/react-bootstrap/react-router-bootstrap">React-Router-Bootstrap</a></li>
</ul></li>
<li><a href="https://github.com/kriasoft/universal-router">Universal Router</a>: &quot;A simple middleware-style router for isomorphic JavaScript web apps&quot;</li>
</ul>

<p><strong>API&#39;s (REST, etc)</strong></p>

<ul>
<li><p><a href="https://stackoverflow.com/questions/33821053/is-there-any-good-http-library-for-react-flux-architecture">&quot;Is there any good Http library for React flux architecture&quot; on StackOverflow</a></p>

<ul>
<li><a href="https://github.github.io/fetch/">Fetch</a> (<a href="https://github.com/github/fetch">GitHub</a>): &quot;A window.fetch JavaScript polyfill&quot;</li>
<li><a href="https://github.com/matthew-andrews/isomorphic-fetch">Isomorphic-Fetch</a>: &quot;Isomorphic WHATWG Fetch API, for Node &amp; Browserify&quot;</li>
<li><a href="https://github.com/visionmedia/superagent">Superagent</a>: &quot;Ajax with less suck&quot;</li>
<li><a href="https://github.com/mbasso/react-http-request">React-Http-Request</a>: Uses superagent</li>
<li><a href="https://github.com/mzabriskie/axios">Axios</a>: &quot;Promise based HTTP client for the browser and node.js&quot;</li>
</ul></li>
<li><p><a href="https://github.com/marmelab/restful.js">Restful.js</a>: &quot;A pure JS client for interacting with server-side RESTful resources. Think Restangular without Angular.&quot;</p></li>
</ul>

<p><strong>Authentication</strong></p>

<ul>
<li><a href="https://github.com/lynndylanhurley/redux-auth">Redux-Auth</a>: &quot;Complete token authentication system for react + redux&quot;</li>
<li><a href="https://github.com/mjrussell/redux-auth-wrapper">Redux-Auth-Wrapper</a>: &quot;A React Higher Order Component (HOC) for handling Authentication and Authorization with Redux and React-Router&quot;</li>
<li><a href="https://github.com/joshgeller/react-redux-jwt-auth-example">React-Redux-JWT-Auth-Example</a>: &quot;Sample project showing possible authentication flow using React, Redux, React-Router, and JWT&quot;</li>
</ul>

<p>For some further reading on this topic:
* <a href="https://scotch.io/tutorials/build-a-react-flux-app-with-user-authentication">&quot;Build a React + Flux App with User Authentication&quot; by Ryan Chenkie</a>
* <a href="https://auth0.com/blog/adding-authentication-to-your-react-flux-app/">&quot;Adding authentication to your React Flux app&quot; by Martin Gontovnikas</a> (<a href="https://github.com/auth0-blog/react-flux-jwt-authentication-sample">GitHub</a>)
* <a href="https://medium.com/@rajaraodv/securing-react-redux-apps-with-jwt-tokens-fcfe81356ea0">&quot;Securing React Redux Apps With JWT Tokens&quot; by rajaraodv</a></p>

<p><strong>Isomorphic</strong></p>

<ul>
<li><a href="http://airbnb.io/projects/hypernova/">Hypernova</a> (<a href="https://github.com/airbnb/hypernova">GitHub</a>): &quot;A service for server-side rendering your JavaScript views&quot;</li>
</ul>

<p><strong>DevTools</strong></p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools</a></li>
<li><a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools</a></li>
</ul>

<h2><a name="boilerplate-starters-examples"></a>Boilerplate, Starter Kits and Examples</h2>

<p>You might be noticing a bit of a trend: each step you take forward, there seem to be a million different options and considerations to make; and this is no different.</p>

<p>To try and avoid this decision fatigue and help new dev&#39;s dive head first into the React world, Facebook has released their very own starter tool: <a href="https://github.com/facebookincubator/create-react-app">Create-React-App</a>. It&#39;s early days still, but this is definitely something to keep an eye on going forward.</p>

<p>Looking through <a href="http://habd.as/awesome-react-boilerplates/">&quot;Awesome React Boilerplates&quot;</a> and some of the other starter kit/generators out there, we have a lot to pick from. With so many options, a <a href="http://andrewhfarmer.com/starter-project/">tool to help narrow it down</a> is pretty useful, but here are some others just in case:</p>

<ul>
<li><a href="https://github.com/kriasoft/react-starter-kit">React-Starter-Kit | Kriasoft</a> (10403): React, modular Flux (with Redux feature), Universal-Router, Babel, Webpack, GraphQL,</li>
<li><a href="https://github.com/mxstbr/react-boilerplate">React-Boilerplate | mxstbr</a> (9052): React, Redux, React-Router, Babel, Webpack, CSS Modules</li>
<li><a href="https://github.com/coryhouse/react-slingshot">React-Slingshot | Cory House</a> (4445): React, Redux, React-Router, Babel, Webpack, etc</li>
<li><a href="https://github.com/jaredpalmer/react-production-starter">React-Production-Starter | Jarad Palmer</a> (834): React, Redux, React-Router, Immutable, Babel, Webpack, etc</li>
<li><a href="http://unicornstandard.com/packages/boilerplate.html">Unicorn-Standard Starter-Kit</a> (403)</li>
</ul>

<p>Or take a look at some examples:</p>

<ul>
<li><a href="https://github.com/arturopala/traffic-lights-control">Example: Traffic-Lights-Control</a>
React, Redux, Akka, Akka-HTTP, WebSockets</li>
<li><a href="https://github.com/tomaash/react-example-filmdb">React-Example-FilmDB</a>: &quot;Isomorphic React + Flux film database example&quot;</li>
</ul>

<h2><a name="stack-tools"></a>Choosing my Stack and Tools</h2>

<ul>
<li>TODO: Should this be in a new post?</li>
</ul>

<p>SASS</p>

<p>Foundation or Bootstrap or Material?</p>

<p><a href="https://nuclide.io/">https://nuclide.io/</a> (IDE)
  <a href="https://github.com/facebook/nuclide">https://github.com/facebook/nuclide</a></p>

<p><a href="https://flowtype.org/">https://flowtype.org/</a> (Typed JS)
  <a href="https://github.com/facebook/flow">https://github.com/facebook/flow</a></p>

<p>With babel?</p>

<p><a href="https://facebook.github.io/immutable-js/">https://facebook.github.io/immutable-js/</a>
  <a href="https://github.com/facebook/immutable-js/">https://github.com/facebook/immutable-js/</a></p>

<p>Markdown
  <a href="https://github.com/jonschlinkert/remarkable">https://github.com/jonschlinkert/remarkable</a></p>

<h2><a name="conclusion"></a>Conclusion</h2>

	  ]]></description>
	</item>

	<item>
	  <title>GraphQL: Why You Should Care</title>
	  <link>/devalias/2016/09/07/graphql-why-you-should-care/</link>
	  <author>devalias</author>
	  <pubDate>2016-09-07T00:00:00+10:00</pubDate>
	  <guid>/devalias/2016/09/07/graphql-why-you-should-care/</guid>
	  <description><![CDATA[
	     <p>If you haven&#39;t yet come across <a href="http://graphql.org/">GraphQL</a>, it&#39;s kind of exciting stuff. It&#39;s a query language developed by <a href="https://code.facebook.com/posts/">Facebook</a>, that basically lets you request exactly the data you need for the given task; no more, no less. Sounds good right?</p>

<h2>Tell me more..</h2>

<p>If you like to get into the nitty gritty of tech specs, you can head over to the <a href="https://facebook.github.io/graphql/">GraphQL Working Draft</a> (<a href="https://github.com/facebook/graphql">GitHub</a>) to have a deeper read, then play around with the <a href="https://github.com/graphql/graphql-js">reference implementation</a> in JavaScript.</p>

<p>Though if specs aren&#39;t really your style, check out &#39;<a href="https://learngraphql.com/">Learn GraphQL</a>&#39; and give their free short course a run through. Should get you up to speed!</p>

<h2>Ok. I&#39;m in!</h2>

<p>Excited? Want to dive into it? Need libraries for your particular tech stack? Head on over to the <a href="https://github.com/chentsulin/awesome-graphql">Awesome GraphQL</a> list. You&#39;re bound to find what you need!</p>

<p>For my particular tech palette I was after something <a href="http://scala-lang.org/">Scala&#39;esque</a>, maybe some <a href="http://doc.akka.io/docs/akka/2.4/scala/http/">Akka-HTTP</a> to go with it. Seems I wasn&#39;t the only one! <a href="http://sangria-graphql.org/">Sangria</a> (<a href="https://github.com/sangria-graphql/sangria">GitHub</a>) is a Scala GraphQL implementation. They even have <a href="https://github.com/sangria-graphql/sangria-akka-http-example">an Akka-HTTP based example</a>. Perfect! Throw in a little <a href="https://github.com/sangria-graphql/sangria-relay">Relay support</a> and this package is pretty much complete.</p>

<p>If you&#39;re looking for an all-in-one stack heading forward, I keep seeing a lot of good things posted by the team at <a href="http://www.apollostack.com/">Apollo Stack</a> (by the <a href="https://www.meteor.com/">Meteor</a> team), so would most definitely recommend keeping an eye on them. They also post a lot of really good articles <a href="https://medium.com/apollo-stack">on their blog</a> too.</p>

<p>For some further reading, make sure to check out:</p>

<ul>
<li><a href="https://medium.com/apollo-stack/tutorial-building-a-graphql-server-cddaa023c035">&quot;Tutorial: How to build a GraphQL server&quot; by Jonas Helfer</a></li>
</ul>

<h2><a name="graphql-relay-redux"></a>GraphQL and Relay.. What about Redux?</h2>

<p>A lot of things you&#39;ll read about GraphQL on the net will talk about it quite closely with <a href="https://facebook.github.io/relay/">Relay</a>, and given they were both released by Facebook, and sort of designed to work together, it makes a lot of sense. That said, you most definitely don&#39;t need to use Relay to take advantage of the awesomeness GraphQL provides!</p>

<p>KADIRA states it pretty well in <a href="https://kadira.io/blog/graphql/graphql-vs-relay">GraphQL vs Relay</a>:</p>

<blockquote>
<p>GraphQL provides a way to model and expose data in your app. You can use it on top of any kind of data source and use it with any kind of transport layer.</p>

<p>Relay is an efficient client-side data-fetching technology built for React. It talks to a GraphQL Schema to get data. Relay also has a server-side part that adds some features on top of GraphQL.</p>
</blockquote>

<p>There is a bunch of talk about how Relay is currently a pain to use, but Facebook seems to be <a href="https://facebook.github.io/react/blog/2016/08/05/relay-state-of-the-state.html">well aware of this issue</a> and has future plans to make it much nicer to work with.</p>

<p>I think it&#39;s definitely worth keeping an eye on Relay in the future, but if you&#39;re not quite ready to jump in, you can always take advantage of the benefits of GraphQL while sticking to something like <a href="http://redux.js.org/">Redux</a> (<a href="https://github.com/reactjs/redux">GitHub</a>). For further reading:</p>

<ul>
<li><a href="https://www.reindex.io/blog/redux-and-relay/">&quot;Comparing Redux and Relay&quot; by Mikhail Novikov</a></li>
<li><a href="https://medium.com/@matt.krick/replacing-relay-with-redux-2990c81aa807">&quot;Replacing Relay with Redux&quot; by Matt Krick</a></li>
<li><a href="https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56">&quot;Getting started with Redux and GraphQL&quot; by James Childs-Maidment</a></li>
<li><a href="http://www.apollostack.com/">Apollo Stack</a></li>
<li><a href="https://github.com/mattkrick/cashay">Cashay</a>: &quot;Relay for the rest of us&quot;</li>
<li><a href="https://github.com/gyzerok/adrenaline">Adrenaline</a>: &quot;Simple Relay alternative&quot;</li>
<li><a href="https://github.com/kennetpostigo/react-reach">React-Reach</a>: &quot;A small library for React to communicate with GraphQL&quot;</li>
</ul>

<h2>GraphQL vs Falcor</h2>

<p>So by now we should have a fairly good idea about what <a href="http://graphql.org/">GraphQL</a> is. So what&#39;s <a href="http://netflix.github.io/falcor/">Falcor</a>? This one comes from our friends over at <a href="http://techblog.netflix.com/">Netflix</a>. In essence, it turns all of your data sources into one giant JSON graph. Regardless of whether you&#39;re loading data remotely, have it cached locally, etc; you&#39;ll access it in the same way.</p>

<p>If you want to read deeper, I found these to be quite useful:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/32057785/what-is-the-difference-between-falcor-and-graphql">&quot;What is the difference between Falcor and GraphQL?&quot; on StackOverflow</a></li>
<li><a href="https://medium.com/apollo-stack/graphql-vs-falcor-4f1e9cbf7504">&quot;GraphQL vs. Falcor&quot; by Jonas Helfer</a></li>
<li><a href="http://react-etc.net/entry/beyond-rest-graphql-vs-falcor">&quot;Beyond REST: GraphQL vs. Falcor&quot; by React-Etc</a></li>
</ul>

<p>The consensus that I came to is that it seems to be on par with GraphQL in a number of ways, but is probably a bit easier to implement and a bit less powerful overall. Apparently you could even go so far as to <a href="http://hueypetersen.com/posts/2015/10/26/querying-graphql-with-falcor/">query GraphQL with Falcor</a>, but not the other way. For my purposes, I think I&#39;ll be sticking with GraphQL.</p>

<p>It&#39;s also worth noting that Facebook has been using various flavours of GraphQL for a few years now, whereas Netflix is yet to (or has only recently) started using Falcor in production.</p>

<h2>API&#39;s: REST, HATEOS, Observables.. GraphQL!</h2>

<p>I have read SO many articles over the years about the &#39;proper&#39; way to design API&#39;s, and why styleX is so much better than styleY. With so much info out there, and so much conflicting advice (even within each supposed style), it&#39;s really easy to get stuck in analysis paralysis.</p>

<p>Greg Ziegan put together a <a href="https://medium.com/@gregoryziegan/how-graphql-taught-me-to-code-client-apps-1c631a9953bd">nice little article</a> talking about his progression along this path: from REST, through <a href="http://timelessrepo.com/haters-gonna-hateoas">HATEOS</a>, observables, etc; and how he ended up at GraphQL. Following on from this, Sashko Stubailo makes a pretty good argument about why GraphQL is <a href="https://medium.com/apollo-stack/graphql-the-next-generation-of-api-design-f24b1689756a">&quot;the next generation of API design&quot;</a>.</p>

<p>While the benefits of a GraphQL-based API seem pretty obvious to me, it&#39;s not always feasible to jump straight into shiny new tech. Maybe you need to support legacy services, interact with 3rd-party API&#39;s, or allow other developers to consume your API without them having to learn the ins and outs of GraphQL. But thankfully, we don&#39;t need to pick one over the other!</p>

<p>The GraphQL team have a pretty good article on their blog about <a href="http://graphql.org/blog/rest-api-graphql-wrapper/">wrapping REST API&#39;s in GraphQL</a>, starting purely with the client-side, and later moving it to the backend. This idea plays in SO well with some little side-projects I&#39;ve been thinking about over the years, and how it could be used to help decompose and combine existing API&#39;s.</p>

<h2>Conclusion</h2>

<p>This is a scattering of the articles and things I have read through while learning more about GraphQL, and why it is so awesome. I definitely know it&#39;s a technology that I am super excited to start utilising in my future projects.</p>

<p>Have you come across any other awesome articles/tools related to GraphQL or similar? I&#39;d love to hear about them! Let me know in the comments below.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Syncing Facebook Bdays/Events with Other Calendars</title>
	  <link>/devalias/2011/10/17/syncing-facebook-bdaysevents-with-other-calendars/</link>
	  <author>devalias</author>
	  <pubDate>2011-10-17T07:39:00+11:00</pubDate>
	  <guid>/devalias/2011/10/17/syncing-facebook-bdaysevents-with-other-calendars/</guid>
	  <description><![CDATA[
	     <p>I&#39;m sure i&#39;m not alone when I say that without Facebook events/bdays I would be so much more out of the loop. A while ago I realised that I could subscribe to events/bday feeds in my external calendars (in this case, my iPhone). Best; Day; Ever! Suddenly I don&#39;t need to be at my computer to know what&#39;s going on, which for me is great since I tend to have the &#39;out of sight out of mind&#39; mentality. Even if I looked at them this morning, ask me at midday and I won&#39;t remember a thing I have planned.</p>

<p>In any case, this stopped working for a while, and I finally got around to reenabling it yesterday, so figured I would make a quick post about how to find it for anyone else interested.</p>

<p>Hope you guys enjoy/find it useful! :)</p>

<h2>Facebook Event Feed</h2>

<ul>
<li>Go to <a href="http://www.facebook.com/events/">http://www.facebook.com/events/</a></li>
<li>Scroll to the bottom of the page</li>
<li>Click on the export link</li>
<li>Copy the webcal:// link</li>
<li>Go to your favourite calendar application and use it&#39;s subscribe feature, pasting in the copied link (on an iPhone if you just click the link it will add it for you)</li>
</ul>

<h2>Facebook Birthday Feed</h2>

<ul>
<li>Go to <a href="http://www.facebook.com/events/birthdays/">http://www.facebook.com/events/birthdays/</a></li>
<li>Scroll to the bottom of the page</li>
<li>Click on the export birthdays link</li>
<li>Copy the webcal:// link</li>
<li>Go to your favourite calendar application and use it&#39;s subscribe feature, pasting in the copied link (on an iPhone if you just click the link it will add it for you)</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Facebook for iPhone v4.0</title>
	  <link>/devalias/2011/10/13/facebook-for-iphone-v4/</link>
	  <author>devalias</author>
	  <pubDate>2011-10-13T09:10:00+11:00</pubDate>
	  <guid>/devalias/2011/10/13/facebook-for-iphone-v4/</guid>
	  <description><![CDATA[
	     <p>I must say, I am quite impressed with the latest iteration of the Facebook app for iPhone. For a long time now, the app has felt sluggish, bloated, and kind of hacked together. No offence to the devs, it would be no easy task to build and maintain it, but sometimes you need a good overhaul to clean everything up, and maybe a new UI to freshen things a little. It seems this is exactly what we get with v4.0.</p>

<p>The interface has been completely overhauled, doing away with the old &#39;launcher&#39; screen of icons, and moving to a more accesible and (I think) intuitive &#39;&#39;slide-out&#39; sidebar. In doing this they have brought a much more fluid feel to the navigation, rather than having to constantly backtrack to the beginning to go elsewhere. This has also made it possible for them to maintain your location in the news feed as you dart in and out of photos, messages, etc.</p>

<p>Whether it&#39;s the more intuitive interface, a bunch of fine tuning, or a combination of, the latest app feels much quicker to respond and load everything. If you used the older apps then I think you will be quite impressed.  As with everything new, there are still a few bugs to iron out. The first time I tried to open the app it seemed to hang for a long time. Not sure if it was updating backend settings, etc or just froze. If the earlier, something more informative than a spinning &#39;&#39;busy&#39; icon wouldn&#39;t go astray. I&#39;ve also noticed a few areas (such as in the account settings) where it feels like the transition between pages isn&#39;t handled as well as it could be. Of most note here is the ability to generate a long &#39;&#39;backhistory trail of pages by clicking through the different account settings pages, as though we were following a nest of links deeper and deeper (rather than the flat menu they actually are)</p>

<p>Overall impressions? In the words of Facebook themselves.. Like! Well worth the upgrade, and looking forward to what they have in store for us in the updates to come.</p>

	  ]]></description>
	</item>


</channel>
</rss>
