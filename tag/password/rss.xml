<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>devalias.net</title>
   
   <link>https://www.devalias.net</link>
   <description>Follow me into the rabbit hole that is my mind and learn about topics including.. security, technology, efficiency, biohacking, health, personal growth and probably a whole lot more.</description>
   <language>en_GB</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Reversing PowerShell 'SecureString' For Fun And Profit</title>
	  <link>/devalias/2013/08/29/reversing-powershell-securestring-for-fun-and-profit/</link>
	  <author>devalias</author>
	  <pubDate>2013-08-29T08:00:52+10:00</pubDate>
	  <guid>/devalias/2013/08/29/reversing-powershell-securestring-for-fun-and-profit/</guid>
	  <description><![CDATA[
	     <p>Something that I needed to do in an engagement recently and thought it might be useful to you guys. Here's a little function and demonstration to show just how insecure it is to store an encrypted <a href="https://en.wikipedia.org/wiki/Windows_PowerShell">PowerShell</a> <a href="http://social.technet.microsoft.com/wiki/contents/articles/4546.working-with-passwords-secure-strings-and-credentials-in-windows-powershell.aspx">'SecureString'</a> WITH the key to decrypt it in a script file (or anywhere for that matter)</p>
<p>Just goes to show that no matter how secure a technology you create, in the end it all comes down to the underpaid, overworked IT staff that have to implement it, and the <em>managerial guidelines</em> that they need to work within.</p>
<p><a href="https://gist.github.com/0xdevalias/6101928">https://gist.github.com/0xdevalias/6101928</a></p>
<p><noscript><pre># Reverse-SecureString</p>
<h1>Version: 1.0 (20130729)</h1>
<h1>Created By: Glenn 'devalias' Grant (<a href="http://devalias.net">http://devalias.net</a>)</h1>
<h1>License: The MIT License (MIT) - Copyright (c) 2013 Glenn 'devalias' Grant (see <a href="http://choosealicense.com/licenses/mit/">http://choosealicense.com/licenses/mit/</a> for full license text)</h1>
<p>function Reverse-SecureString([string]$secureString,[string]$key)<br />
{<br />
$objSecString=ConvertTo-SecureString -String $secureString -Key ([Byte[]]$key.Split(&quot; &quot;))<br />
$secString=[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($objSecString)<br />
$plaintext=[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($secString)<br />
return $plaintext<br />
}</p>
<h1>Example SecureString decryption</h1>
<p>$password = &quot;76492d1116743f0423413b16050a5345MgB8AFAAVwBiAGkAegBjAEcANQA5AEMAOABVAFoAUQBoADMAZAA1AEUAcgBGAHcAPQA9AHwAYgAxAGUAYwA0AGQA<br />
YwBkADUANQAwAGUAYQBmADYAMwA5AGEANwAyADAAMwBmADAANwA3AGUANgA3ADYAYgA0AGIANgA4ADYAZAA3ADkAZgBkAGYAMgAzADcAMQA2ADkAYgA3AGMA<br />
YwA0AGUAZQA1AGIANAA5ADEAZABjADQAZQA5ADgANQAxADUAYwBmADgAZQBjADMAMgBmADgANgBhADAANQBlADAANgBkAGIAZABlAGMAZAA2ADcAMwBmAGYA<br />
YwA5ADMAZQAwADYAZAA5AGMAMwAyAGUANgAyAGUAMAA3ADcAYgBkADIAYQAzAGIAOAA3ADQAMwA2ADIAMAA2AA==&quot;<br />
$key = &quot;114 138 230 113 215 43 58 173 155 129 196 29 105 162 10 25 187 79 18 221 142 29 155 43 28 20 19 40 103 83 110 240&quot;<br />
$passPlaintext = Reverse-SecureString &quot;$password&quot; &quot;$key&quot;<br />
Write-Host $passPlaintext # This should output: TotallySecurePasswordLol!</pre></noscript><script src="https://gist.github.com/6101928.js"> </script></p>

	  ]]></description>
	</item>


</channel>
</rss>
