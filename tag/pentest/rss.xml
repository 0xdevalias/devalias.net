<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>devalias.net</title>
   
   <link>http://devalias.net</link>
   <description>Follow me into the rabbit hole that is my mind and learn about topics including.. security, technology, efficiency, biohacking, health, personal growth and probably a whole lot more.</description>
   <language>en_GB</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Y U NO Update Kali?</title>
	  <link>/pages/alias1/devalias.net/devalias/2014/02/13/y-u-no-update-kali/</link>
	  <author>devalias</author>
	  <pubDate>2014-02-13T09:00:41+11:00</pubDate>
	  <guid>/pages/alias1/devalias.net/devalias/2014/02/13/y-u-no-update-kali/</guid>
	  <description><![CDATA[
	     <p><img src="/devalias/2014/02/13/y-u-no-update-kali/yunoupdatekali.jpg" alt="Kali Linux Y U No Update"></p>

<p>Not too long ago I was setting up a new pentest machine with Kali. Fairly straightforward a task, though slightly inconvenienced by the fact that the net was down at the time. No matter I thought, continue offline and all should be fine.. apparently not.</p>

<p>When you don&#39;t have a live net connection during setup Kali decides not to fill in the server details needed by apt-get to pull down anything more than security updates (no new tools for you!) Thankfully this is a simple and quick fix.</p>

<h2>But how?</h2>

<p>Having a look over at the <a href="http://docs.kali.org/general-use/kali-linux-sources-list-repositories">Kali documentation</a> we find the instructions and url&#39;s required. Basically we just have to..</p>

<ul>
<li>Edit <code>/etc/apt/sources.list</code></li>
<li>Add or ensure the following lines are present:</li>
</ul>

<h3>For general Kali repositories (aka everyone)</h3>
<div class="highlight"><pre><code class="language-" data-lang="">deb http://http.kali.org/kali kali main non-free contrib
deb http://security.kali.org/kali-security kali/updates main contrib non-free
</code></pre></div>
<h3>To use the source (aka Jedi&#39;s)</h3>
<div class="highlight"><pre><code class="language-" data-lang="">deb-src http://http.kali.org/kali kali main non-free contrib
deb-src http://security.kali.org/kali-security kali/updates main contrib non-free
</code></pre></div>
<h3>And finally for those who like to live (and bleed) on the edge</h3>
<div class="highlight"><pre><code class="language-" data-lang="">deb http://repo.kali.org/kali kali-bleeding-edge main
#deb-src http://repo.kali.org/kali kali-bleeding-edge main
</code></pre></div>
<h2>Now we update!</h2>

<p>Once this is done (and saved) we can just do our standard</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get update &amp;&amp; apt-get upgrade
</code></pre></div>
<p>or</p>
<div class="highlight"><pre><code class="language-" data-lang="">apt-get update &amp;&amp; apt-get upgrade
</code></pre></div>
<p>Happy (ethical) hacking!</p>

	  ]]></description>
	</item>

	<item>
	  <title>vFeed - Wrapper/Helper Scripts For Speed and Efficiency</title>
	  <link>/pages/alias1/devalias.net/devalias/2013/11/21/vfeed-wrapper-helper-scripts-for-speed-and-efficiency/</link>
	  <author>devalias</author>
	  <pubDate>2013-11-21T09:00:54+11:00</pubDate>
	  <guid>/pages/alias1/devalias.net/devalias/2013/11/21/vfeed-wrapper-helper-scripts-for-speed-and-efficiency/</guid>
	  <description><![CDATA[
	     <p>Just wanted to share some quick little bash scripts I threw together to make vFeed a little quicker/more efficient for my use.</p>

<p>If you don&#39;t know it already, <a href="https://github.com/toolswatch/vfeed">vFeed</a> is an Open Source Cross Linked and Aggregated Local Vulnerability Database put together by the fine folks over at <a href="http://www.toolswatch.org/vfeed/">ToolsWatch</a>. You can query it for a whole bunch of information and details that may aid you in your pentests, all from the convenience of a local database.</p>

<p>To make life easier, I throw these scripts in my vFeed directory and symlink them from bin.</p>
<div class="highlight"><pre><code class="language-" data-lang="">cd /path/to/bin
ln -s /path/to/vFeed/bin/vfeed.sh vfeed
ln -s /path/to/vFeed/bin/vfeedcli.sh vfeedcli
ln -s /path/to/vFeed/bin/vfeed_update.sh vfeed_update
</code></pre></div>
<p>Enjoy!</p>

<p><noscript><pre># vfeed.sh - README
* Version: 0.2 (20131126)
* Created By: Glenn &#39;devalias&#39; Grant (<a href="http://devalias.net">http://devalias.net</a>)
* License: The MIT License (MIT) - Copyright (c) 2013 Glenn &#39;devalias&#39; Grant (see <a href="http://choosealicense.com/licenses/mit/">http://choosealicense.com/licenses/mit/</a> for full license text)
* vFeed URL: <a href="https://github.com/toolswatch/vfeed">https://github.com/toolswatch/vfeed</a>
* vFeed.sh announcement/info: <a href="http://blog.devalias.net/post/67532513020/vfeed-wrapper-helper-scripts-for-speed-and-efficiency">http://blog.devalias.net/post/67532513020/vfeed-wrapper-helper-scripts-for-speed-and-efficiency</a></p>

<h2>Version 0.2 (20131126)</h2>

<ul>
<li>Updated to support vFeed Beta v0.4.6

<ul>
<li>Added Defense::get_suricata command support</li>
<li>Added Patches::get_vmware command support</li>
</ul></li>
<li>Update vfeed_update.sh to pull the latest version from git</li>
</ul>

<h2>Version 0.1 (20131120)</h2>

<ul>
<li>Initial version. Supports vFeed Beta v0.4.5
</pre></noscript><script src="https://gist.github.com/alias1/7554985.js"> </script></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Sparty - Sharepoint and Frontpage Auditing Tool (Now With More NTLM Authentication!)</title>
	  <link>/pages/alias1/devalias.net/devalias/2013/11/14/sparty-sharepoint-frontpage-auditing-tool-now-with-more-ntlm/</link>
	  <author>devalias</author>
	  <pubDate>2013-11-14T09:00:52+11:00</pubDate>
	  <guid>/pages/alias1/devalias.net/devalias/2013/11/14/sparty-sharepoint-frontpage-auditing-tool-now-with-more-ntlm/</guid>
	  <description><![CDATA[
	     <p>I&#39;ve been doing a little bit of poking around Sharepoint security lately, doing some research and playing with some assessment/pentest tools. One such tool (released this year at <a href="https://www.blackhat.com/us-13/">Black Hat USA</a>) is called <a href="http://sparty.secniche.org/">Sparty</a>. Written by <a href="https://twitter.com/AdityaKSood">0kn0ck</a> (aka Aditya K Sood) of <a href="http://secniche.org/">SecNiche Security Labs</a>, Sparty is a tool designed to assist in auditing sites built on Microsoft Sharepoint and/or Frontpage.</p>

<p>From the official site:</p>

<blockquote>
<p>Sparty is an open source tool written in python to audit web applications using sharepoint and frontpage architecture. The motivation behind this tool is to provide an easy and robust way to scrutinize the security configurations of sharepoint and frontpage based web applications. Due to the complex nature of these web administration software, it is required to have a simple and efficient tool that gathers information, check access permissions, dump critical information from default files and perform automated exploitation if security risks are identified. A number of automated scanners fall short of this and Sparty is a solution to that.</p>
</blockquote>

<p>You can download a copy from the <a href="http://sparty.secniche.org/">project page</a> (I&#39;ll be a good net citizen and won&#39;t link directly to the <code>.tar.gz</code>)</p>

<p>I won&#39;t dive into usage/etc here as it&#39;s still a very early release too (v0.1!) So if you want to find out a bit more about that you should look at the <a href="http://sparty.secniche.org/usage.html">Sparty Usage</a> page over at SecNiche.</p>

<h2>Now With More NTLM Authentication!</h2>

<p>In playing with the tool there were a few things that I kept running into that gave me some minor annoyance that I had to work around.</p>

<p>Firstly, there was a hard version check for Python 2.6 (I was running 2.7), so before I could even list the help I had to disable that (simple fix)</p>

<p>The next issue was a little more frustrating at first, and took a bit longer to solve. In running the tool, I was only receiving <code>401 Unauthorized</code> responses. After looking a little further into it, I discovered that this was due to the server requesting NTLM authentication, which the tool was not providing. A bit more hacking around (and a bunch of google/python documentation) and I had a solution that would allow me to enter my authentication credentials (or some I acquired) and then proceed with using the tool as normal.</p>

<h2>Sharing is Caring!</h2>

<p>As we know, sharing is caring, so i&#39;ve made my changes (and any others I may make to Sparty in the future) available over at Github.</p>

<p><strong>Click over to <a href="https://github.com/alias1/sparty">alias1/sparty</a> and check it out!</strong></p>

	  ]]></description>
	</item>

	<item>
	  <title>Loki - Python Based Infrastructure Pentesting Tool (ARP, HSRP, OSPF, etc)</title>
	  <link>/pages/alias1/devalias.net/devalias/2013/10/24/loki-python-based-infrastructure-pentesting-tool-arp-hsr/</link>
	  <author>devalias</author>
	  <pubDate>2013-10-24T09:00:00+11:00</pubDate>
	  <guid>/pages/alias1/devalias.net/devalias/2013/10/24/loki-python-based-infrastructure-pentesting-tool-arp-hsr/</guid>
	  <description><![CDATA[
	     <p>Loki is a python based infrastructure pentesting tool focussing on layer 3 protocols, dealing with protocols such as:</p>

<ul>
<li>ARP</li>
<li>HSRP</li>
<li>RIP</li>
<li>BGP</li>
<li>OSPF</li>
<li>EIGRP</li>
<li>WLCCP</li>
<li>VRRP</li>
<li>BFD</li>
<li>LDP</li>
<li>MPLS</li>
</ul>

<p>In the words of the author</p>

<blockquote>
<p>At the beginning LOKI was made to combine some stand-alone command line tools, like the bgp<em>cli, the ospf</em>cli or the ldp_cli and to give them a user friendly, graphical interface. In the meantime LOKI is more than just the combination of the single tools, it gave its modules the opportunity to base upon each other (like combining ARP-spoofing from the ARP module with some man-in-the-middle actions, rewriting MPLS-labels for example) and even inter operate with each other.</p>
</blockquote>

<h2>Getting Loki</h2>

<p><a href="https://c0decafe.de/svn/codename_loki/packages/">Loki is available for a number of different platforms</a> including:</p>

<ul>
<li>Kali</li>
<li>Backtrack 4 R2</li>
<li>OSX

<ul>
<li>Including macports</li>
<li>Sadly no <a href="http://brew.sh/">Homebrew</a>/<a href="http://caskroom.io/">Homebrew Cask</a> version.. yet..</li>
</ul></li>
<li>Win32</li>
<li>Debian-7.1</li>
<li>Fedora-15</li>
<li>Gentoo</li>
<li>Sabayon-10</li>
<li>Ubuntu-10.04</li>
<li>Ubuntu-11.04</li>
</ul>

<h2>Installing Loki in Kali (Rebuilding the deb package)</h2>

<p>When I went to install the v0.2.7-1 version of Loki in Kali, I ran into a problem with the package <code>pylibpcap</code> not existing in the repos. It seems that at some stage this changed it&#39;s name to <code>python-libpcap</code>.</p>

<p>To fix this up, we can just edit the dependency in the deb package, then install it as we normally would. So without further delay…</p>

<p>Download the Loki deb package to your Kali box:</p>
<div class="highlight"><pre><code class="language-" data-lang="">wget http://c0decafe.de/svn/codename_loki/packages/kali-1/loki_0.2.7-1_amd64.deb
</code></pre></div>
<p>Extract the contents of the deb package into a new folder:</p>
<div class="highlight"><pre><code class="language-" data-lang="">mkdir lokidevalias
dpkg-deb -x loki_0.2.7-1_amd64.deb ./lokidevalias
dpkg-deb -e loki_0.2.7-1_amd64.deb ./lokidevalias/DEBIAN
</code></pre></div>
<p>Edit the <code>control</code> file with your favourite editor, change <code>pylibpcap</code> to <code>python-libpcap</code>, then save the file.</p>
<div class="highlight"><pre><code class="language-" data-lang="">vi ./lokidevalias/DEBIAN/control
</code></pre></div>
<p>Build the new debian package with the changes we just made:</p>
<div class="highlight"><pre><code class="language-" data-lang="">cd lokidevalias
dpkg-deb -b . ../loki_0.2.7-1-devalias_amd64.deb
</code></pre></div>
<p>Start the install with dpkg, then finish it off with the dependencies using apt-get:</p>
<div class="highlight"><pre><code class="language-" data-lang="">cd ..
dpkg -i loki_0.2.7-1-devalias_amd64.deb
apt-get install -f
</code></pre></div>
<h2>Using Loki</h2>

<p>Given the vast array of options available, I will delegate to a rather good article over at Packetstan (a little outdated, but mostly good)</p>

<ul>
<li><a href="http://www.packetstan.com/2011/02/running-loki-on-backtrack-4-r2.html">Exploiting Networks with Loki on Backtrack 4 R2</a> – Packetstan</li>
</ul>

<h2>Conclusion</h2>

<p>Hopefully the above worked for you and makes your life a bit easier. Happy pentesting!</p>

<h2>Appendix A - libssl.so.0.9.8</h2>

<p>Depending which particular loki package you&#39;re trying to use, you may run into an issue where the <code>libssl.so.0.9.8</code> package isn&#39;t available in the repos for your system (as was the case on my Kali box). In this instance, you should try downloading the latest package for your platform</p>

<p>(<strong>NB:</strong> Even if the version number is the same, it might not be exactly the same. I found the 0.2.7-1 package I was using was different to the same versioned Kali package)</p>

	  ]]></description>
	</item>

	<item>
	  <title>Reversing PowerShell 'SecureString' For Fun And Profit</title>
	  <link>/pages/alias1/devalias.net/devalias/2013/08/29/reversing-powershell-securestring-for-fun-and-profit/</link>
	  <author>devalias</author>
	  <pubDate>2013-08-29T08:00:52+10:00</pubDate>
	  <guid>/pages/alias1/devalias.net/devalias/2013/08/29/reversing-powershell-securestring-for-fun-and-profit/</guid>
	  <description><![CDATA[
	     <p>Something that I needed to do in an engagement recently and thought it might be useful to you guys. Here&#39;s a little function and demonstration to show just how insecure it is to store an encrypted <a href="https://en.wikipedia.org/wiki/Windows_PowerShell">PowerShell</a> <a href="http://social.technet.microsoft.com/wiki/contents/articles/4546.working-with-passwords-secure-strings-and-credentials-in-windows-powershell.aspx">&#39;SecureString&#39;</a> WITH the key to decrypt it in a script file (or anywhere for that matter)</p>

<p>Just goes to show that no matter how secure a technology you create, in the end it all comes down to the underpaid, overworked IT staff that have to implement it, and the <em>managerial guidelines</em> that they need to work within.</p>

<p><noscript><pre># Reverse-SecureString</p>

<h1>Version: 1.0 (20130729)</h1>

<h1>Created By: Glenn &#39;devalias&#39; Grant (<a href="http://devalias.net">http://devalias.net</a>)</h1>

<h1>License: The MIT License (MIT) - Copyright (c) 2013 Glenn &#39;devalias&#39; Grant (see <a href="http://choosealicense.com/licenses/mit/">http://choosealicense.com/licenses/mit/</a> for full license text)</h1>

<p>function Reverse-SecureString([string]$secureString,[string]$key)
{
  $objSecString=ConvertTo-SecureString -String $secureString -Key ([Byte[]]$key.Split(&quot; &quot;))
  $secString=[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($objSecString)
  $plaintext=[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($secString)
  return $plaintext
}</p>

<h1>Example SecureString decryption</h1>

<p>$password = &quot;76492d1116743f0423413b16050a5345MgB8AFAAVwBiAGkAegBjAEcANQA5AEMAOABVAFoAUQBoADMAZAA1AEUAcgBGAHcAPQA9AHwAYgAxAGUAYwA0AGQA
YwBkADUANQAwAGUAYQBmADYAMwA5AGEANwAyADAAMwBmADAANwA3AGUANgA3ADYAYgA0AGIANgA4ADYAZAA3ADkAZgBkAGYAMgAzADcAMQA2ADkAYgA3AGMA
YwA0AGUAZQA1AGIANAA5ADEAZABjADQAZQA5ADgANQAxADUAYwBmADgAZQBjADMAMgBmADgANgBhADAANQBlADAANgBkAGIAZABlAGMAZAA2ADcAMwBmAGYA
YwA5ADMAZQAwADYAZAA5AGMAMwAyAGUANgAyAGUAMAA3ADcAYgBkADIAYQAzAGIAOAA3ADQAMwA2ADIAMAA2AA==&quot;
$key = &quot;114 138 230 113 215 43 58 173 155 129 196 29 105 162 10 25 187 79 18 221 142 29 155 43 28 20 19 40 103 83 110 240&quot;
$passPlaintext = Reverse-SecureString &quot;$password&quot; &quot;$key&quot;
Write-Host $passPlaintext # This should output: TotallySecurePasswordLol!</pre></noscript><script src="https://gist.github.com/alias1/6101928.js"> </script></p>

	  ]]></description>
	</item>

	<item>
	  <title>ERPScan Automator - Because Manual is Meh</title>
	  <link>/pages/alias1/devalias.net/devalias/2013/08/10/erpscan-automator-because-manual-is-meh/</link>
	  <author>devalias</author>
	  <pubDate>2013-08-10T08:00:50+10:00</pubDate>
	  <guid>/pages/alias1/devalias.net/devalias/2013/08/10/erpscan-automator-because-manual-is-meh/</guid>
	  <description><![CDATA[
	     <p>Another quick little tool for you guys today that I hacked together to save myself some time. This one automates running through a number of tests using the <a href="https://erpscan.com/research/free-pentesting-tools-for-sap-and-oracle/">ERPScan SAP Pentesting Tool</a></p>

<p>At time of writing, configuration is all done inside the script, with no support for command line parameters (might add them in the future)</p>

<p><noscript><pre>@echo off
@rem ----------------
@rem Config - Banner
@rem ----------------
set BAT<em>VER=0.1 (20130703)
set BANNER</em>DASH=--------------------------------
set BANNER<em>NAMEVER=Erpscan Automator v%BAT</em>VER%
set BANNER<em>BY=Created By: Glenn &#39;devalias&#39; Grant (<a href="http://devalias.net">http://devalias.net</a>)
set BANNER</em>UPDATES=Updates at: <a href="https://gist.github.com/alias1/6118709">https://gist.github.com/alias1/6118709</a>
set BANNER_LICENSE=License: The MIT License (MIT) - Copyright (c) 2013 Glenn &#39;devalias&#39; Grant (see <a href="http://choosealicense.com/licenses/mit/">http://choosealicense.com/licenses/mit/</a> for full license text)</p>

<p>@rem ----------------
@rem Parms
@rem ----------------
set OUT<em>NAME=CHANGEME</em>TO<em>YOUR</em>OUTFILE<em>NAME
set SITE=<a href="http://example.com:1234/changeme/to/your/url">http://example.com:1234/changeme/to/your/url</a>
set USER=CHANGEME</em>TOYOUR<em>TESTUSER
set PASS=CHANGEME</em>TOYOUR_TESTPASS
set MODULES=1 2 3 4 5 9 10 11 15 16 17 18 19</p>

<p>@rem ----------------
@rem Config
@rem ----------------
set ERPSCAN<em>PATH=&quot;X:\CHANGEME\H4x0rTools\Erpscan&quot;
set ERPSCAN</em>FILENAME=black.pl
set SITE<em>OPT=-s
set USER</em>OPT=-u
set PASS<em>OPT=-p
set MODULE</em>OPT=-m
set BAT<em>FILENAME=%~nx0
set BAT</em>PATH=%~dp0
set OUT<em>EXT=.txt
set OUT</em>FILE=&quot;%BAT<em>PATH%/%OUT</em>NAME%%OUT_EXT%&quot;</p>

<p>@rem ----------------
@rem Main Program
@rem ----------------
title %BANNER_NAMEVER%</p>

<p>echo %BANNER<em>DASH%
echo %BANNER</em>NAMEVER%
echo %BANNER<em>BY%
echo %BANNER</em>UPDATES%
echo %BANNER<em>LICENSE%
echo %BANNER</em>DASH%</p>

<p>echo %BANNER<em>DASH% &gt;&gt; %OUT</em>FILE%
echo Generated with %BANNER<em>NAMEVER% &gt;&gt; %OUT</em>FILE%
echo %BANNER<em>BY% &gt;&gt; %OUT</em>FILE
%echo %BANNER<em>UPDATES% &gt;&gt; %OUT</em>FILE
echo %BANNER<em>LICENSE% &gt;&gt; %OUT</em>FILE%
echo %BANNER<em>DASH% &gt;&gt; %OUT</em>FILE%</p>

<p>echo.
echo Site:    %SITE%
echo User:    %USER%
echo Pass:    hidden
echo Modules: %MODULES%</p>

<p>echo. &gt;&gt; %OUT<em>FILE%
echo Site:   %SITE% &gt;&gt; %OUT</em>FILE%
echo User:   %USER% &gt;&gt; %OUT<em>FILE%
echo Pass:   hidden &gt;&gt; %OUT</em>FILE%
echo Modules: %MODULES% &gt;&gt; %OUT_FILE%</p>

<p>cd /D %ERPSCAN_PATH%</p>

<p>SETLOCAL ENABLEDELAYEDEXPANSION
for %%x in (%MODULES%) do (
  set MODULE=%%x</p>

<p>echo.
  echo --------------------------------
  echo Running module !MODULE!..
  echo --------------------------------</p>

<p>echo. &gt;&gt; %OUT<em>FILE%
  echo -------------------------------- &gt;&gt; %OUT</em>FILE%
  echo Running module !MODULE!.. &gt;&gt; %OUT<em>FILE%
  echo -------------------------------- &gt;&gt; %OUT</em>FILE%</p>

<p>perl %ERPSCAN<em>FILENAME% %SITE</em>OPT% %SITE% %USER<em>OPT% %USER% %PASS</em>OPT% %PASS% %MODULE<em>OPT% !MODULE! &gt;&gt; %OUT</em>FILE%
)</p>

<p>echo.
echo Done</p>

<p>pause
</pre></noscript><script src="https://gist.github.com/alias1/6118709.js"> </script></p>

	  ]]></description>
	</item>

	<item>
	  <title>nmap.sh - Saving Precious Seconds</title>
	  <link>/pages/alias1/devalias.net/devalias/2013/07/13/nmap-sh-saving-precious-seconds/</link>
	  <author>devalias</author>
	  <pubDate>2013-07-13T08:00:00+10:00</pubDate>
	  <guid>/pages/alias1/devalias.net/devalias/2013/07/13/nmap-sh-saving-precious-seconds/</guid>
	  <description><![CDATA[
	     <p>In the course of my work I end up issuing the same simple commands again and again, and while they are pretty easy to remember, they still take more time than they really need to.</p>

<p>With that in mind, here&#39;s a little bash script I threw together today to reduce the time it takes to kick off a standard (in my day to day usage) nmap scan. Hopefully you can get some use out of it.</p>

<p><noscript><pre>#!/bin/bash
echo &quot;-----------------------------------------------&quot;
echo &quot;A very simple script to make nmap scanning a little quicker to kick off&quot;
echo &quot;By Glenn &#39;/dev/alias&#39; Grant (devalias.net)&quot;
echo &quot;v0.3&quot;
echo &quot;-----------------------------------------------&quot;
<em>iphost=$1
_now=$(date +&quot;%Y%m%d-%H%M&quot;)
_nmapopts=&quot;-A -vvv ${@:2}&quot;
_nmapoptshidden=&quot;--webxml&quot;
_nmapoptsfilename=$(echo $</em>nmapopts | tr -d &#39; &#39;) 
<em>file=&quot;nmap-$</em>now-$<em>iphost$</em>nmapoptsfilename&quot;</p>

<p>if [ -z &quot;$1&quot; ]; then
  echo &quot;Usage: nmap.sh ipOrHostnameToScan [any other arguments here]&quot;
  echo &quot;Default Options: $<em>nmapoptshidden $</em>nmapopts&quot;
  exit
fi</p>

<p>nmap -oA $<em>file $</em>nmapoptshidden $<em>nmapopts $</em>iphost
</pre></noscript><script src="https://gist.github.com/alias1/5963377.js"> </script></p>

	  ]]></description>
	</item>

	<item>
	  <title>How to SSH to iPhone/iPad/iDevice via USB</title>
	  <link>/pages/alias1/devalias.net/devalias/2013/03/07/how-to-ssh-to-iphone-via-usb/</link>
	  <author>devalias</author>
	  <pubDate>2013-03-07T08:38:49+11:00</pubDate>
	  <guid>/pages/alias1/devalias.net/devalias/2013/03/07/how-to-ssh-to-iphone-via-usb/</guid>
	  <description><![CDATA[
	     <p>So in order to run the iPad through a debug proxy (Burp Suite), and still be able to forward on the traffic to the net, I needed to be able to talk to it over USB. (yay limited tech to work with!)</p>

<p>This wasn&#39;t actually too hard to get going thanks to a little tool called usbmuxd.</p>

<h2>Process</h2>

<ol>
<li>Install usbmuxd (i did this through homebrew: brew install libmuxd)</li>
<li>Startup the included iproxy tool (<code>iproxy LOCAL_PORT DEVICE_PORT)iproxy 2222 22</code>)</li>
<li>Plug in your iDevice (I assume you already have SSH setup on it and enabled)
SSH to localhost:LOCAL_PORT, making sure to specify the account you want to logon as <code>ssh root@127.0.0.1 -p 2222</code></li>
<li>???</li>
<li>Profit!</li>
</ol>

<p>Yay for things just working how they should!</p>

	  ]]></description>
	</item>

	<item>
	  <title>iPen: Hacking with the iDevice (Setting up your iPhone as a Penetration Tester)</title>
	  <link>/pages/alias1/devalias.net/devalias/2013/02/27/ipen-hacking-with-the-idevice/</link>
	  <author>devalias</author>
	  <pubDate>2013-02-27T13:45:00+11:00</pubDate>
	  <guid>/pages/alias1/devalias.net/devalias/2013/02/27/ipen-hacking-with-the-idevice/</guid>
	  <description><![CDATA[
	     <p>Today I finally got around to the task i&#39;ve been looking forward to for the last week or so. We got an iPad to play around with at work, mostly so we can try and break the mobile apps before they go public. Not a huge amount you can do on it in it&#39;s default state, so I got to jailbreak it!</p>

<p>I won&#39;t go into the specifics of that now though (keep an eye out for another post soon) </p>

<p>In googling around for information on what the best tools/setup for pentesting with an iDevice were I came across a hackaday article titled <a href="http://hackaday.com/2010/08/18/make-iphone-a-penetration-testing-tool/">Make iPhone a penetration testing tool</a>. Perfect! Well.. almost. It turns out it just makes reference to a different article written a few years ago by Nicholas M. Petty. Unfortunately his old domain is now happily serving up some advertising type spam. Even though the information is a little dated, I (after tracking it down myself) decided to make it easier for everyone else to find.</p>

<p>The following is the original article text, as written by Nicholas M. Petty back in 2010</p>

<blockquote>
<h3>Introduction</h3>

<p>(now featured on hackaday.com, thanks guys!)</p>

<p>There are many articles and presentations about the concept of using an iPhone or iPod Touch as a penetration tool. So as I read up about it, I realized that I have yet to see an actual tutorial or &quot;how-to&quot; on putting a suite of tools on an iDevice. So this article/how-to/whatever is just that. A document of my experiences turning my iPod Touch into a all-in-one hacking/penetration-testing platform.</p>

<h3>Before you jailbreak</h3>

<p>So of course, your iDevice should be jailbroken. BUT WAIT!! There are a few very crucial things you MUST know about it being jailbroken. This comes from personal experience and me having to start from scratch. When jailbreaking your iDevice, you MUST make your root partition much bigger then default. My iPod is a 8gb, and since I plan on using it mostly for penetration testing, I set my root partition to 4gb. This leaves enough room for a bit of music while I&#39;m out and about, as well as for a few of those time saving apps. The reason we must do this, is because once you start downloading all of these tools and their dependencies, it starts filling up that ~350MB partition pretty quickly. Most of our tools are going to be command-line based and will be installed on this partition.</p>

<h3>How to jailbreak properly</h3>

<p>So you are probably wondering how to do this, right? Well, I went through all of the pain to find out how. My iPod had 4.0.1 installed. I went to jailbreakme.com on the device, swiped and now its jailbroken. But thats not it, in order to change the root partition, you must jailbreak it again! Though this time with sn0wbreeze (all links below). Start up sn0wbreeze and select the ipod/phone 4.0 firmware(download below). Be sure to select Expert mode when starting sn0wbreeze, so that you can change your root partition.  Once you get to that screen set it to AT LEAST 2gb.  Just remember though, once this is set, you can&#39;t change it again without restoring from scratch.   Once you have the ipws created, open up iTunes, connect your iDevice, and in the iPod/Phone menu click on restore while holding down the SHIFT key.  This will allow you to browse for your custom firmware ipws.  Pick your sn0wbreeze one, should be in the same folder as sn0wbreeze, or could be on the Desktop.  Your iDevice should begin to restore.  Now here is where I ran into another problem.</p>

<p>EDIT: BigBubbaX, from the comments below, has posted a link to a guide for jailbreaking MC model iPod Touch&#39;s.  Please refer to it if your iPod Touch is an MC model.  Check this by going to Settings -&gt; General -&gt; About, and looking at &#39;Model&#39;. <a href="http://www.geekword.net/jailbreak-ios-4-ipod-touch-2g-mc-sn0wbreeze-1.7/">http://www.geekword.net/jailbreak-ios-4-ipod-touch-2g-mc-sn0wbreeze-1.7/</a></p>

<h3>Possible errors</h3>

<p>Error 3194:</p>

<p>You may get an error 3194 in iTunes.  This is because iTunes is attempting to match the signature of the selected firmware to Apples servers.  It won&#39;t match because we&#39;ve made a custom one.  To get around this problem, navigate to volume:\Windows\System32\drivers\etc\ and open up the host file with notepad.  You&#39;ll then want to add the following line: 74.208.10.249 gs.apple.com .  This will point iTunes to saurik&#39;s signature server.  Who is the creator of Cydia.</p>

<p>Error 1604:</p>

<p>This is simply because your iDevice is not yet jailbroken.  Jailbreak with jailbreakme.com, or with the latest version of redsn0w.</p>

<h3>First thing&#39;s first</h3>

<p>Now that we have a successfully jailbroken iDevice with a large root partition, (if not, comment below and I&#39;ll get ya taken care of!  we need to get a few essentials installed.  Most of these can be found in the Cydia app store, so long as you select &#39;Developer Mode&#39; at the start of Cydia.  If you didn&#39;t, thats okay, just go to Manage, then click on settings in the top left corner, and select it there.  If you don&#39;t, you won&#39;t see any of the command line tools we need.</p>

<h3>OpenSSH</h3>

<p>So now go to search and look for OpenSSH.  Something I don&#39;t like about Cydia is it&#39;s search standards.  In order to find OpenSSH quicker, you need to type in &#39;SS&#39;, then search.  If you type in SSH, you won&#39;t find anything.  So now that you have that installed, you can SSH into your device and execute commands that way.  Trust me, it gets tiring doing everything on that tiny keyboard.  One thing you need to know about connecting via SSH is you must turn Auto-lock off on your iDevice.  If the screen goes dim, wifi turns off.  I can&#39;t say the same for edge or 3g though, since I&#39;m not using an iPhone.  Once you have OpenSSH installed, you need to log in via your favorite ssh client.  I&#39;m using PuTTy.  I also find it easier to log in as &quot;root@yourinternalip&quot;  then use your default password &quot;alpine.&quot;  Change this immediately, there are people out there who will try to break in to your iDevice.  Change it using the command, <code>passwd &lt;newpass&gt;</code>.</p>

<h3>Mobile Terminal</h3>

<p>As of this current date (08/18/2010), the Mobile Terminal app in Cydia will not work on 4.0.  So I found one else where online and uploaded it my server.  So first you need to make sure you have cURL installed.  Do this by going to Cydia -&gt; Manage -&gt; Packages and look for it.  If it is not already installed, search cydia for &#39;curl&#39;, and install.  This will allow us to download files via terminal.  Now, in your SSH session, type <code>curl -O http://repo.nickmpetty.com/MobileTerminal-crnt.deb</code>.  Once it has finished downloading, you need to make Cydia install it.  Do this be making sure you have the AutoInstall folder.  It should be located in /var/root/Media/Cydia/AutoInstall.  If it is not there, create it using the mkdir command(all case sensitive).  Next move your MobileTerminal-crnt.deb from the directory you downloaded it in(this should be /var/root/ if you did it over ssh).  So you would type <code>mv /var/root/MobileTerminal-crnt.deb /var/root/Media/Cydia/AutoInstall</code>.  Now close Cydia, if it was open, and re-open it.  This will load the new package.  If you still don&#39;t see it on SpringBoard(where all of your apps are), respring with winterboard, or download a respring app in Cydia and run it.  Now you have a working Mobile terminal, and it will be updated by Cydia as new versions come out.  This should work with any .deb file that has been said to work on an iDevice.</p>

<p>EDIT: Alex, from the comments below, has informed me that you can add <code>http://podzombie.com/repository</code> to Cydia to download a working version of MobileTerminal.</p>

<h3>Lets build a shell…</h3>

<p>Now we need to install some base tools and packages that are normally included on a normal linux computer.  Most of these can all be found in Cydia without any problems.  Install &quot;unzip, adv-cmds, aptitiude, apt 0.6 transitional, inetutils, iPhone/Python, make, subversion, wget, iDNS, stunnel, tcpdump, setup tools, ruby, OpenSSH, OpenSSL, MetaSploit&quot;  Some of these packages we&#39;ve installed already, and may already be installed with other packages.  So just be sure you have all of those tools at least.</p>

<h3>Perl</h3>

<p>In order to install Perl, we have to go back in via ssh or terminal.  If you use mobile terminal, be sure to login as root with the <code>su</code> command.  You may be able to find it in Cydia, or via <code>apt-get install perl</code>.  If not, do it this way.  Execute <code>curl -O http://coredev.nl/cydia/coredev.pub</code>.  Then run <code>apt-key add coredev.pub</code>.  If you get an error, it&#39;s all cool, just move on.  Now type, <code>echo &#39;deb http://coredev.nl/cydia iphone main&#39; &gt; /etc/apt/sources.list.d/coredev.nl.list</code>.  Then, <code>apt-get update</code>, and <code>apt-get install perl</code>.  Thats it.  You can now delete that coredev.pub file.</p>

<h3>Now for the fun part</h3>

<p>First we are going to create a folder to hold all of our non-install command-line tools.  I created a folder called <code>pentest</code> in the <code>/var/root/</code> directory.  you can create this anywhere you&#39;d like though.</p>

<p>We can now begin installing the tools that we will be using for our penetration needs.</p>

<h3>Ettercap-ng</h3>

<p>First is ettercap-ng.  As always, try searching Cydia for it.  If you can&#39;t find it there, do this.  Add this source to Cydia, (edit: 08/22/2010)<code>http://cydia.theworm.tw/cydia</code>. The search for ettercap.  Also install libnet if it is not already installed.  There have been reports of ettercap not forwarding packets correctly, but the problem is being resolved, if it hasn&#39;t been already.</p>

<h3>aircrack-ng</h3>

<p>Next is aircrack-ng.  If you can&#39;t find it in Cydia,  very simply execute, <code>curl -O http://repo.nickmpetty.com/touchair.zip</code>, then <code>uzip touchair.zip</code>.  Now move the extracted to folder to <code>pentest</code> if its not there already.  To use, navigate to your aircrack folder and execute commands as normal.</p>

<p>EDIT: to get aircrack, add the following source to Cydia, <code>http://cydia.xsellize.com</code>.  Once you&#39;ve  installed it, an icon will appear on SpringBoard, don&#39;t bother with it.  It is only to tell you to run aircrack from the terminal.  Navigate to <code>/var/aircrack/</code> to use.  You can also move the aircrack folder to your pentest folder if you&#39;d like.</p>

<h3>Nikto2</h3>

<p>To get nikto2 we can use the svn command.  Make sure you&#39;ve install Subversion and execute, <code>svn co http://svn2.assembla.com/svn/Nikto_2</code>.  It will then download the folder, move it to pentest and then navigate to the nikto2 folder, and the next folder then execute as normal.</p>

<h3>SET (Social Engineering Toolkit)</h3>

<p>SET is one of my favorite tools, so to install it, use svn again, <code>svn co http://svn.thepentest.com/social_engineering_toolkit/ SET/</code>.  And again, move it to your pentest folder, then SET, and go as normal once again.  A problem I&#39;ve discovered with this though is that it wont run completely without the python ssl module.  I&#39;ve found one, and tried compiling on the iPod, but it won&#39;t go without a gcc compiler.  I&#39;m working on a work around for it but keep running into errors.  If anyone knows anything about this, please let me know and together we can get this working correctly.</p>

<p>Tools can be found directly in Cydia as well.  Just explore the sections and download what you want.  One more you defentily need is nmap, search Cydia for it.</p>

<p>These are only a few of the things you can do with your iDevice for penetration testing.  If you can&#39;t find a tool in Cydia, just search google, or comment below and I&#39;ll work on getting it to work for your iDevice.  This article serves as a reference, how-to, and documentation of turning your iDevice into a complete penetration testing device.  I&#39;ll update this as I install more tools.  So keep checking back.</p>

<h3>Sources:</h3>

<ul>
<li><p><a href="http://www.offensive-security.com/metasploit-unleashed/Social-Engineering-Toolkit">http://www.offensive-security.com/metasploit-unleashed/Social-Engineering-Toolkit</a></p></li>
<li><p><a href="http://thireus.dareyourmind.net/index.php/iphone-notes/111-iphone-perl-framework">http://thireus.dareyourmind.net/index.php/iphone-notes/111-iphone-perl-framework</a></p></li>
<li><p><a href="http://www.chiark.greenend.org.uk/%7Esgtatham/putty/">http://www.chiark.greenend.org.uk/~sgtatham/putty/</a></p></li>
<li><p><a href="http://www.assembla.com/spaces/Nikto_2/trac_subversion_tool">http://www.assembla.com/spaces/Nikto_2/trac_subversion_tool</a></p></li>
<li><p><a href="http://www.eweek.com/c/a/Security/iPhone-Turned-into-PocketSized-Hacking-Platform/">http://www.eweek.com/c/a/Security/iPhone-Turned-into-PocketSized-Hacking-Platform/</a></p></li>
</ul>

<p>Written by Nicholas M. Petty</p>
</blockquote>

<h2>Sources/Links</h2>

<ul>
<li><a href="http://web.archive.org/web/20100824080407/http://blog.nickmpetty.com/?p=252">Original Article on The Wayback Machine</a></li>
<li><a href="http://hackaday.com/2010/08/18/make-iphone-a-penetration-testing-tool/">Hackaday Article</a></li>
</ul>

<h2>Other Useful/Interesting Sites</h2>

<ul>
<li><a href="http://ihackmyi.com/topic/82651-how-to-install-set-on-iphone/">http://ihackmyi.com/topic/82651-how-to-install-set-on-iphone/</a></li>
<li><a href="http://www.eccouncil.org/CAST-Installing-Metaspoilt-and-SET-on-your-Apple-iDevice.pdf">http://www.eccouncil.org/CAST-Installing-Metaspoilt-and-SET-on-your-Apple-iDevice.pdf</a></li>
<li><a href="http://www.offensive-security.com/metasploit-unleashed-training/metasploit-3-4-and-set-on-iphone-4/">http://www.offensive-security.com/metasploit-unleashed-training/metasploit-3-4-and-set-on-iphone-4/</a></li>
<li><a href="http://www.offensive-security.com/offsec/metasploit-4-on-iphone-4s-and-ipad-2/">http://www.offensive-security.com/offsec/metasploit-4-on-iphone-4s-and-ipad-2/</a></li>
<li><a href="http://seckev.blog.com/2012/07/16/installation-metasploit-4-2-on-new-ipad-ios-5-1-1-after-jailbreak/">http://seckev.blog.com/2012/07/16/installation-metasploit-4-2-on-new-ipad-ios-5-1-1-after-jailbreak/</a></li>
<li><a href="http://hakin9.org/installing-metasploit-and-set-social-engineer-toolkit-on-your-apple-idevice/">http://hakin9.org/installing-metasploit-and-set-social-engineer-toolkit-on-your-apple-idevice/</a> [Subscription Required]</li>
<li><a href="http://blog.thireus.com/thireus-repository-new-cydia-security-oriented-repository">http://blog.thireus.com/thireus-repository-new-cydia-security-oriented-repository</a></li>
<li><a href="http://blog.thireus.com/how-to-install-ios-perl-framework-on-iphone-ipod-touch-or-ipad">http://blog.thireus.com/how-to-install-ios-perl-framework-on-iphone-ipod-touch-or-ipad</a></li>
<li><a href="https://appsec-labs.com/system/files/Attacking%20iPhone%20Applications.pdf">https://appsec-labs.com/system/files/Attacking%20iPhone%20Applications.pdf</a></li>
<li><a href="https://appsec-labs.com/Cydia_explained">https://appsec-labs.com/Cydia_explained</a></li>
<li><a href="https://appsec-labs.com/iNalyzer">https://appsec-labs.com/iNalyzer</a></li>
<li><a href="http://www.securitylearn.net/tag/iphone-pentesting/">http://www.securitylearn.net/tag/iphone-pentesting/</a></li>
<li><a href="http://www.mayhemiclabs.com/node/15">http://www.mayhemiclabs.com/node/15</a></li>
<li><a href="http://resources.infosecinstitute.com/pentesting-iphone-applications/">http://resources.infosecinstitute.com/pentesting-iphone-applications/</a></li>
<li><a href="http://defcon.org/images/defcon-17/dc-17-presentations/defcon-17-thomas_wilhelm-hacking_ipod_touch.pdf">http://defcon.org/images/defcon-17/dc-17-presentations/defcon-17-thomas_wilhelm-hacking_ipod_touch.pdf</a></li>
<li><a href="http://www.toolswatch.org/2012/08/blackhat-arsenal-2012-releases-sira-semi-automated-ios-rapid-assessment-released-at-arsenal/">http://www.toolswatch.org/2012/08/blackhat-arsenal-2012-releases-sira-semi-automated-ios-rapid-assessment-released-at-arsenal/</a></li>
<li><a href="http://www.siratool.com">http://www.siratool.com</a></li>
<li><a href="http://www.toolswatch.org/2011/06/owasp-igoat-the-learning-tool-for-ios-developers-v1-0-released/">http://www.toolswatch.org/2011/06/owasp-igoat-the-learning-tool-for-ios-developers-v1-0-released/</a></li>
<li><a href="http://code.google.com/p/owasp-igoat/">http://code.google.com/p/owasp-igoat/</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
