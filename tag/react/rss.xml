<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>devalias.net</title>
   
   <link>http://devalias.net</link>
   <description>Follow me into the rabbit hole that is my mind and learn about topics including.. security, technology, efficiency, biohacking, health, personal growth and probably a whole lot more.
</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Starting a New Web Application (Part 2): A Time to React</title>
	  <link>/devalias/2016/10/13/starting-a-new-web-application-2-a-time-to-react/</link>
	  <author>devalias</author>
	  <pubDate>2016-10-13T10:39:15+11:00</pubDate>
	  <guid>/devalias/2016/10/13/starting-a-new-web-application-2-a-time-to-react/</guid>
	  <description><![CDATA[
	     <p>In <a href="TODO">part 1</a> we started looking into the current web application landscape, and what technologies are out there. From what I learned through my research there, I have decided to delve further into <a href="https://facebook.github.io/react/">React</a>; partly because it&#39;s one of the current hot topics and seems really interesting, partly because I think Facebook are pretty cool and make some awesome things, and partly because it&#39;ll be a good skill to flesh out for my resume/future endeavours.</p>

<h2>ToC</h2>

<ul>
<li><a href="#introductory-reading">Introductory Reading</a></li>
<li><a href="#desired-features">Desired Features</a></li>
<li><a href="#react">React</a></li>
<li><a href="#flux">Flux</a></li>
<li><a href="#libraries-features">Libraries and Features</a>

<ul>
<li>Routing</li>
<li>API&#39;s (REST, etc)</li>
<li>Authentication</li>
<li>Isomorphic</li>
<li>DevTools</li>
</ul></li>
<li><a href="#boilerplate-starters-examples">Boilerplate, Starter Kits and Examples</a></li>
<li><a href="#stack-tools">Choosing my Stack and Tools</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2><a name="introductory-reading"></a>Introductory Reading</h2>

<p>To save myself rewriting what&#39;s already been explained, here are some quick intro articles on React, Flux and JSX that helped my to understand it all a bit better. If you need a quick refresher, I&#39;ll see you in a minute:</p>

<ul>
<li><a href="http://blog.andrewray.me/reactjs-for-stupid-people/">&quot;ReactJS For Stupid People&quot; by Andrew Ray</a></li>
<li><a href="http://blog.andrewray.me/flux-for-stupid-people/">&quot;Flux For Stupid People&quot; by Andrew Ray</a></li>
<li><a href="http://blog.andrewray.me/youre-missing-the-point-of-jsx/">&quot;You&#39;re Missing The Point Of JSX&quot; by Andrew Ray</a></li>
<li><a href="https://facebook.github.io/react/docs/getting-started.html">React: Getting Started</a></li>
<li><a href="https://facebook.github.io/react/docs/tutorial.html">React: Tutorial</a></li>
<li><a href="https://www.toptal.com/react/navigating-the-react-ecosystem">&quot;Navigating the React Ecosystem&quot; by Tomas Holas</a></li>
</ul>

<h2><a name="desired-features"></a>Desired Features</h2>

<p>To help narrow down which libraries/solutions I might go with, it helped to have a bit of an idea of what sort of features/ideas I wanted to incorporate into my stack. In no particular order:</p>

<ul>
<li>Single page application</li>
<li>Driven by a first-class API</li>
<li>Microservices</li>
<li>Token-based Authentication</li>
<li><a href="https://medium.com/front-end-hacking/the-secret-to-organization-in-functional-programming-913484e85fc9">&#39;Feature First&#39; Organization</a></li>
<li><a href="http://www.reactivemanifesto.org/">Reactive</a></li>
<li><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">&#39;DRY&#39;</a></li>
<li><a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/">Isomorphic</a>?</li>
</ul>

<h2><a name="react"></a>React</h2>

<p>This one is nice and simple. <a href="https://facebook.github.io/react/">React</a> is React. We don&#39;t have a crazy environment of different options, flavours and alternatives we need to weigh up and choose between here.</p>

<blockquote>
<p>React is a JavaScript library for creating user interfaces by Facebook and Instagram. Many people choose to think of React as the V in MVC. - <a href="https://facebook.github.io/react/docs/why-react.html">Why React?</a></p>
</blockquote>

<p>If you need to know more about it, make sure to go back and brush up on the <a href="#introductory-reading">introductory reading</a>.</p>

<h2><a name="flux"></a>Flux</h2>

<p><a href="https://facebook.github.io/flux/">Flux</a> (<a href="https://github.com/facebook/flux">GitHub</a>) is a concept <a href="https://facebook.github.io/react/blog/2014/05/06/flux.html">announced back in 2014</a> by Facebook. Since it isn&#39;t a library like React, there are SO many flavours, choices and differing implementations. You could be stuck here in analysis paralysis forever.</p>

<blockquote>
<p>Flux is the application architecture that Facebook uses for building client-side web applications. It complements React&#39;s composable view components by utilizing a unidirectional data flow. It&#39;s more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code. - <a href="https://facebook.github.io/flux/docs/overview.html">Flux Overview</a></p>
</blockquote>

<p>Thankfully a whole pile of different people have already put together some comparisons of different implementations, and why you might want to pick one over another:</p>

<ul>
<li><a href="https://github.com/kriasoft/react-starter-kit/issues/22">&quot;Which Flux implementation should I use?&quot; on react-starter-kit</a></li>
<li><a href="http://pixelhunter.me/post/110248593059/flux-solutions-compared-by-example">&quot;Flux solutions compared by example&quot; by pixelhunter</a> (<a href="https://github.com/voronianski/flux-comparison">GitHub</a>)</li>
</ul>

<p>There are <a href="https://github.com/justinwoo/react-rxjs-flow">even</a> <a href="http://qiita.com/kimagure/items/22cf4bb2a967fcba376e">some</a> <a href="https://github.com/AlexMost/RxReact">people</a> playing with the idea of skipping Flux entirely and using <a href="https://github.com/Reactive-Extensions/RxJS">RxJS</a>.</p>

<p>Reading through the various options out there, I pretty much came to the conclusion that I probably want to be looking at <a href="https://facebook.github.io/relay/">Relay</a> by Facebook (<a href="https://github.com/facebook/relay">GitHub</a>, <a href="https://github.com/relayjs/relay-starter-kit">Starter Kit</a>) and <a href="http://redux.js.org/">Redux</a> (<a href="https://github.com/reactjs/redux">GitHub</a>). I&#39;ve briefly spoken about these two before in <a href="/devalias/2016/09/07/graphql-why-you-should-care/#graphql-relay-redux">&quot;GraphQL: Why You Should Care&quot;</a>. But for the sake of completeness, here are the relevant articles again:
* <a href="https://www.reindex.io/blog/redux-and-relay/">&quot;Comparing Redux and Relay&quot; by Mikhail Novikov</a>
* <a href="https://medium.com/@matt.krick/replacing-relay-with-redux-2990c81aa807">&quot;Replacing Relay with Redux&quot; by Matt Krick</a>
* <a href="https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56">&quot;Getting started with Redux and GraphQL&quot; by James Childs-Maidment</a></p>

<p>While I think Relay is pretty cool, and seems like it will <a href="https://facebook.github.io/react/blog/2016/08/05/relay-state-of-the-state.html">only keep getting better</a>, I think sticking to a Redux based stack for the time being will suit my needs better. Though don&#39;t think that leaves you missing out. There are a number of projects that combine the best aspects of both worlds:</p>

<ul>
<li><a href="http://www.apollostack.com/">Apollo Stack</a></li>
<li><a href="https://github.com/mattkrick/cashay">Cashay</a>: &quot;Relay for the rest of us&quot;</li>
<li><a href="https://github.com/gyzerok/adrenaline">Adrenaline</a>: &quot;Simple Relay alternative&quot;</li>
<li><a href="https://github.com/kennetpostigo/react-reach">React-Reach</a>: &quot;A small library for React to communicate with GraphQL&quot;</li>
</ul>

<p>There also seems to be some pretty lively discussions worth watching as well:</p>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/464">Redux #464: &quot;Relay and Redux&quot;</a></li>
<li><a href="https://github.com/reactjs/redux/issues/775">Redux #775: &quot;Has Redux&#39;s Time Come and Gone&quot; </a></li>
</ul>

<p>A nice feature of Redux is that it <a href="http://redux.js.org/docs/basics/UsageWithReact.html">isn&#39;t just tied to React</a>; so you can write Redux apps with <a href="https://github.com/reactjs/react-redux">React</a>, <a href="https://github.com/angular-redux">Angular</a>, <a href="http://www.ember-redux.com/">Ember</a>, jQuery, or even vanilla JavaScript.</p>

<p>The best way to learn about Redux, how it works, and why you should care, is through the official (free) course: <a href="https://egghead.io/courses/getting-started-with-redux">&quot;Getting Started with Redux&quot;</a> (<a href="https://github.com/tayiorbeii/egghead.io_redux_course_notes">Notes</a>)</p>

<p>Finally, while it might be a little early to throw this into the mix, for the sake of completeness in &#39;interesting things I read on this topic&#39;:</p>

<ul>
<li><a href="http://jamesknelson.com/join-the-dark-side-of-the-flux-responding-to-actions-with-actors/">&quot;Join The Dark Side Of The Flux: Responding to Actions with Actors&quot; by James K Nelson</a></li>
</ul>

<h2><a name="libraries-features"></a>Libraries and Features</h2>

<p>Following the DRY principles, there are bound to be tons of pre-existing libraries to help implement all sorts of features you may want/need. While it&#39;s always hard to truly know what you want till you get started, you could start by looking through some <a href="https://github.com/enaqx/awesome-react">awesome react</a>/<a href="https://github.com/jondot/awesome-react-native">react native</a> lists; or read on below.</p>

<p><strong>Routing</strong></p>

<ul>
<li><a href="https://github.com/reactjs/react-router">React-Router</a>: This seems to be the de-facto standard.

<ul>
<li><a href="https://github.com/react-bootstrap/react-router-bootstrap">React-Router-Bootstrap</a></li>
</ul></li>
<li><a href="https://github.com/kriasoft/universal-router">Universal Router</a>: &quot;A simple middleware-style router for isomorphic JavaScript web apps&quot;</li>
</ul>

<p><strong>API&#39;s (REST, etc)</strong></p>

<ul>
<li><p><a href="https://stackoverflow.com/questions/33821053/is-there-any-good-http-library-for-react-flux-architecture">&quot;Is there any good Http library for React flux architecture&quot; on StackOverflow</a></p>

<ul>
<li><a href="https://github.github.io/fetch/">Fetch</a> (<a href="https://github.com/github/fetch">GitHub</a>): &quot;A window.fetch JavaScript polyfill&quot;</li>
<li><a href="https://github.com/matthew-andrews/isomorphic-fetch">Isomorphic-Fetch</a>: &quot;Isomorphic WHATWG Fetch API, for Node &amp; Browserify&quot;</li>
<li><a href="https://github.com/visionmedia/superagent">Superagent</a>: &quot;Ajax with less suck&quot;</li>
<li><a href="https://github.com/mbasso/react-http-request">React-Http-Request</a>: Uses superagent</li>
<li><a href="https://github.com/mzabriskie/axios">Axios</a>: &quot;Promise based HTTP client for the browser and node.js&quot;</li>
</ul></li>
<li><p><a href="https://github.com/marmelab/restful.js">Restful.js</a>: &quot;A pure JS client for interacting with server-side RESTful resources. Think Restangular without Angular.&quot;</p></li>
</ul>

<p><strong>Authentication</strong></p>

<ul>
<li><a href="https://github.com/lynndylanhurley/redux-auth">Redux-Auth</a>: &quot;Complete token authentication system for react + redux&quot;</li>
<li><a href="https://github.com/mjrussell/redux-auth-wrapper">Redux-Auth-Wrapper</a>: &quot;A React Higher Order Component (HOC) for handling Authentication and Authorization with Redux and React-Router&quot;</li>
<li><a href="https://github.com/joshgeller/react-redux-jwt-auth-example">React-Redux-JWT-Auth-Example</a>: &quot;Sample project showing possible authentication flow using React, Redux, React-Router, and JWT&quot;</li>
</ul>

<p>For some further reading on this topic:
* <a href="https://scotch.io/tutorials/build-a-react-flux-app-with-user-authentication">&quot;Build a React + Flux App with User Authentication&quot; by Ryan Chenkie</a>
* <a href="https://auth0.com/blog/adding-authentication-to-your-react-flux-app/">&quot;Adding authentication to your React Flux app&quot; by Martin Gontovnikas</a> (<a href="https://github.com/auth0-blog/react-flux-jwt-authentication-sample">GitHub</a>)
* <a href="https://medium.com/@rajaraodv/securing-react-redux-apps-with-jwt-tokens-fcfe81356ea0">&quot;Securing React Redux Apps With JWT Tokens&quot; by rajaraodv</a></p>

<p><strong>Isomorphic</strong></p>

<ul>
<li><a href="http://airbnb.io/projects/hypernova/">Hypernova</a> (<a href="https://github.com/airbnb/hypernova">GitHub</a>): &quot;A service for server-side rendering your JavaScript views&quot;</li>
</ul>

<p><strong>DevTools</strong></p>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools</a></li>
<li><a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools</a></li>
</ul>

<h2><a name="boilerplate-starters-examples"></a>Boilerplate, Starter Kits and Examples</h2>

<p>You might be noticing a bit of a trend: each step you take forward, there seem to be a million different options and considerations to make; and this is no different.</p>

<p>To try and avoid this decision fatigue and help new dev&#39;s dive head first into the React world, Facebook has released their very own starter tool: <a href="https://github.com/facebookincubator/create-react-app">Create-React-App</a>. It&#39;s early days still, but this is definitely something to keep an eye on going forward.</p>

<p>Looking through <a href="http://habd.as/awesome-react-boilerplates/">&quot;Awesome React Boilerplates&quot;</a> and some of the other starter kit/generators out there, we have a lot to pick from. With so many options, a <a href="http://andrewhfarmer.com/starter-project/">tool to help narrow it down</a> is pretty useful, but here are some others just in case:</p>

<ul>
<li><a href="https://github.com/kriasoft/react-starter-kit">React-Starter-Kit | Kriasoft</a> (10403): React, modular Flux (with Redux feature), Universal-Router, Babel, Webpack, GraphQL,</li>
<li><a href="https://github.com/mxstbr/react-boilerplate">React-Boilerplate | mxstbr</a> (9052): React, Redux, React-Router, Babel, Webpack, CSS Modules</li>
<li><a href="https://github.com/coryhouse/react-slingshot">React-Slingshot | Cory House</a> (4445): React, Redux, React-Router, Babel, Webpack, etc</li>
<li><a href="https://github.com/jaredpalmer/react-production-starter">React-Production-Starter | Jarad Palmer</a> (834): React, Redux, React-Router, Immutable, Babel, Webpack, etc</li>
<li><a href="http://unicornstandard.com/packages/boilerplate.html">Unicorn-Standard Starter-Kit</a> (403)</li>
</ul>

<p>Or take a look at some examples:</p>

<ul>
<li><a href="https://github.com/arturopala/traffic-lights-control">Example: Traffic-Lights-Control</a>
React, Redux, Akka, Akka-HTTP, WebSockets</li>
<li><a href="https://github.com/tomaash/react-example-filmdb">React-Example-FilmDB</a>: &quot;Isomorphic React + Flux film database example&quot;</li>
</ul>

<h2><a name="stack-tools"></a>Choosing my Stack and Tools</h2>

<ul>
<li>TODO: Should this be in a new post?</li>
</ul>

<p>SASS</p>

<p>Foundation or Bootstrap or Material?</p>

<p><a href="https://nuclide.io/">https://nuclide.io/</a> (IDE)
  <a href="https://github.com/facebook/nuclide">https://github.com/facebook/nuclide</a></p>

<p><a href="https://flowtype.org/">https://flowtype.org/</a> (Typed JS)
  <a href="https://github.com/facebook/flow">https://github.com/facebook/flow</a></p>

<p>With babel?</p>

<p><a href="https://facebook.github.io/immutable-js/">https://facebook.github.io/immutable-js/</a>
  <a href="https://github.com/facebook/immutable-js/">https://github.com/facebook/immutable-js/</a></p>

<p>Markdown
  <a href="https://github.com/jonschlinkert/remarkable">https://github.com/jonschlinkert/remarkable</a></p>

<h2><a name="conclusion"></a>Conclusion</h2>

	  ]]></description>
	</item>

	<item>
	  <title>Starting a New Web Application (Part 1): An Exploration of Options</title>
	  <link>/devalias/2016/08/24/starting-a-new-web-application-1-an-exploration-of-options/</link>
	  <author>devalias</author>
	  <pubDate>2016-08-24T00:00:00+10:00</pubDate>
	  <guid>/devalias/2016/08/24/starting-a-new-web-application-1-an-exploration-of-options/</guid>
	  <description><![CDATA[
	     <p>Finding myself with some free time (and looking into starting a new project), I thought I might catch myself up on the state of web technologies, and what might be a good stack to work with.</p>

<p>The details collected here are most certainly not a complete layout of the entire landscape, and there will no doubt be leanings toward my personal tastes (<a href="http://www.reactivemanifesto.org/">reactive</a>, api-driven, etc). You should use this more as a starter into your own deeper research than as a source of ultimate truth. With that out of the way, let&#39;s get into it!</p>

<p><strong>Quicklinks</strong></p>

<ul>
<li><a href="#frontend">Frontend</a>

<ul>
<li><a href="#frontend-frameworks">Frameworks</a></li>
<li><a href="#frontend-ui">UI</a></li>
<li><a href="#frontend-scripting">Scripting</a></li>
</ul></li>
<li><a href="#backend">Backend</a></li>
<li><a href="#tooling">Tooling</a></li>
<li><a href="#conclusions">Conclusions</a></li>
</ul>

<h2><a name="frontend"></a>Frontend</h2>

<p>The frontend is the pretty, interactive, main part that people will be seeing. You can have the most amazingly streamlined and perfect backend code, but noone&#39;s going to notice and love it without a strong frontend to back it up.</p>

<p><strong><a name="frontend-frameworks"></a>Frameworks</strong></p>

<p>The days of raw JavaScript and jQuery selectors is long gone. We&#39;re looking for a nice, modern framework to help put together our frontend. Here&#39;s a little selection of some of our options:</p>

<ul>
<li><a href="https://facebook.github.io/react/">React</a> (<a href="https://github.com/reactjs">GitHub</a>) (most likely with a flavour of <a href="https://facebook.github.io/flux/">Flux</a> (<a href="https://github.com/facebook/flux">GitHub</a>))

<ul>
<li>A frontend framework from Facebook that is taking the web by storm. Probably my personal favourite from what I&#39;ve seen so far.</li>
<li>It even let&#39;s you <a href="https://facebook.github.io/react-native/">build for native devices</a>!</li>
</ul></li>
<li><a href="https://angular.io/">Angular (v2)</a> (or if you like outdated for some reason <a href="https://angularjs.org/">AngularJS (v1)</a>)

<ul>
<li>Also <a href="https://mobile.angular.io/">available for native devices</a></li>
<li>I was a big fan of AngularJS (v1), and I want to like v2, but I don&#39;t think it will be my main choice.</li>
</ul></li>
<li>There are a TON of other frontend frameworks, of varying popularity and support. I won&#39;t delve into them much, but there&#39;s heaps of info out there

<ul>
<li><a href="http://emberjs.com/">Ember</a></li>
<li><a href="https://vuejs.org/">Vue.js</a>

<ul>
<li>From reading around the web, there&#39;s a decent amount of good stuff talking about Vue. In the end I decided against it since it&#39;s not supported by a big backer, and the skills aren&#39;t as useful on a resume. That said, for a personal project it could be a great fit!</li>
<li><a href="https://vuejs.org/guide/comparison.html">https://vuejs.org/guide/comparison.html</a></li>
<li><a href="http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/">http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/</a></li>
<li><a href="http://vuejs.org/2016/04/27/announcing-2.0/">http://vuejs.org/2016/04/27/announcing-2.0/</a></li>
<li><a href="https://github.com/vuejs/vue">vue</a>, <a href="https://github.com/vuejs/vue-rx">vue-rx</a>, <a href="https://github.com/vuejs/vue-resource">vue-resource</a>, <a href="https://github.com/vuejs/vue-router">vue-router</a>, <a href="https://github.com/vuejs/vuex">vuex</a>, <a href="https://github.com/revue/revue">revuew</a></li>
</ul></li>
<li><a href="http://aurelia.io/">Aurelia</a></li>
<li><a href="http://riotjs.com/">Riot</a> (<a href="https://muut.com/blog/technology/riot-2.0/">v2</a>)</li>
</ul></li>
</ul>

<p>As with most things, every man and his dog has their own opinion, so here are a few comparisons I found useful:</p>

<ul>
<li><a href="https://www.ociweb.com/resources/publications/sett/comparison-of-angular-2-and-react/">&quot;Comparison of Angular 2 and React&quot; by Mark Volkmann and Lance Finney</a></li>
<li><a href="http://blog.backand.com/angular-2-vs-react/">&quot;Angular 2 vs. React&quot; by Itay Herskovits</a></li>
<li><a href="https://medium.freecodecamp.com/angular-2-versus-react-there-will-be-blood-66595faafd51">&quot;Angular 2 versus React: There Will Be Blood&quot; by Cory House</a></li>
<li><a href="https://rlafranchi.github.io/2016/05/03/vue-vs-react/">&quot;Vue.js vs React.js&quot; by Richard LaFranchi</a></li>
<li><a href="https://forums.meteor.com/t/why-doesnt-mdg-just-adopt-vue-js-and-forget-about-react-vs-blaze/13926/6">&quot;Why doesn’t MDG just adopt Vue.js and forget about React vs Blaze?&quot;</a></li>
</ul>

<p><strong><a name="frontend-ui"></a>UI</strong></p>

<p>Even if you like to go oldschool and code your site by hand in notepad/vi, you can&#39;t deny the ease/benefits of using a frontend UI framework.</p>

<ul>
<li><a href="https://getbootstrap.com/">Bootstrap</a> (<a href="https://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha/">v4</a>)

<ul>
<li>Released by Twitter, and arguably one of the most used frontend UI frameworks out there.</li>
<li><a href="https://react-bootstrap.github.io/">React-Bootstrap</a> (<a href="https://github.com/react-bootstrap/react-bootstrap">GitHub</a>)</li>
<li><a href="https://ng-bootstrap.github.io/#/home">ng-bootstrap</a> by the angular-ui team (<a href="https://github.com/ng-bootstrap/ng-bootstrap">GitHub</a>)</li>
<li><a href="https://valor-software.com/ng2-bootstrap/">ng2-bootstrap</a> by valor-software (<a href="https://github.com/valor-software/ng2-bootstrap">GitHub</a>)</li>
</ul></li>
<li><a href="http://foundation.zurb.com/">Foundation</a>

<ul>
<li>While not as well known as the other two mentioned here, those that make use of foundation swear by it.</li>
<li><a href="https://react.foundation/">React-Foundation</a> (<a href="https://github.com/nordsoftware/react-foundation">GitHub</a>)</li>
<li><a href="https://aruberto.github.io/react-foundation-components/">React-Foundation-Components</a></li>
</ul></li>
<li><a href="https://material.google.com/">Material Design</a>

<ul>
<li>Following a set of design principals from Google, this lays out a slick, consistent look and feel.</li>
<li><a href="https://getmdl.io/">Material Design Lite</a></li>
<li><a href="http://www.material-ui.com/">For React</a> (<a href="https://github.com/callemall/material-ui">GitHub</a>)</li>
<li><a href="https://material.angular.io/">For Angular (v2)</a> (<a href="https://github.com/angular/material2">GitHub</a>)</li>
<li><a href="https://material.angularjs.io/">For AngularJS (v1)</a> (<a href="https://github.com/angular/material">GitHub</a>)</li>
</ul></li>
</ul>

<p>Can&#39;t decide? Try some comparisons:</p>

<ul>
<li><a href="http://blog.teamtreehouse.com/the-rundown-bootstrap-vs-google-mdl-vs-foundation">&quot;The Rundown: Bootstrap vs. Google MDL vs. Foundation&quot; by treehouse</a></li>
<li><a href="https://dannyherran.com/2016/03/state-of-affairs-bootstrap-4-vs-foundation-6/">&quot;State of affairs: Bootstrap 4 vs Foundation 6.2&quot; by Danny Herran</a></li>
</ul>

<p><strong><a name="frontend-scripting"></a>Scripting</strong></p>

<p>Modern web apps live by the functionality they enable in the browser, and to do this, we need a JS-esque language. Your chosen frontend framework may sway your choice (eg. Angular (v2) has a strong preference for TypeScript), but ultimately, it&#39;s up to what you/your team feel comfortable with. With <a href="https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js">so many options</a> out there, it&#39;s hard to pick.. And of course, you could always stick to plain JavaScript.. and with the new features coming in <a href="http://es6-features.org/">ES6</a> (eg. <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">promises</a>) and beyond, it might be a good choice.</p>

<ul>
<li><a href="https://babeljs.io/">Babel</a>

<ul>
<li>A transpiler that lets you play with all the fun features of JavaScript ES6 and beyond, while maintaining compatibility with all of the older browsers.</li>
</ul></li>
<li><a href="https://www.typescriptlang.org/">TypeScript</a> (<a href="https://github.com/Microsoft/TypeScript">GitHub</a>)

<ul>
<li>&quot;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript&quot;</li>
<li>If you&#39;re using Angular (v2) and like sticking to convention, this is the one for you.</li>
</ul></li>
<li><a href="http://coffeescript.org/">CoffeeScript</a> (or maybe <a href="https://github.com/michaelficarra/CoffeeScriptRedux">v2</a>)

<ul>
<li>This used to be my choice, but looking at the other options available now, I think i&#39;ll be moving on.</li>
<li>As always, there are a bunch of arguments for and against..

<ul>
<li><a href="https://robots.thoughtbot.com/replace-coffeescript-with-es6">&quot;Replace CoffeeScript with ES6&quot; by Blake Williams</a></li>
<li><a href="http://tech.noredink.com/post/111583727108/dont-replace-coffeescript-with-es6-transpilers">&quot;Don’t Replace CoffeeScript with ES6 Transpilers&quot; by Richard Feldman</a></li>
<li>etc</li>
</ul></li>
<li>If you&#39;re looking for a way out, why not <a href="https://github.com/decaffeinate/decaffeinate">decaffeinate</a>?</li>
</ul></li>
<li><a href="https://flowtype.org/">Flow</a> (<a href="https://github.com/facebook/flow">GitHub</a>)

<ul>
<li>While it&#39;s not a language unto itself, it does allow you the benefits of typed JavaScript without having to dive into something like TypeScript.</li>
</ul></li>
<li><a href="https://www.scala-js.org/">Scala.js</a>

<ul>
<li>A little left field, this transpiles Scala code into JavaScript. While I probably wouldn&#39;t see myself using this as a main choice, it could make for some interesting reusability between front and backend.</li>
</ul></li>
</ul>

<h2><a name="backend"></a>Backend</h2>

<p>My preferences for backend tech stacks lean heavily towards <a href="http://www.scala-lang.org/">Scala</a> and the <a href="https://www.lightbend.com/platform">Lightbend Reactive Platform</a> these days, but I will make quick mention of some of the other options available.</p>

<ul>
<li><a href="http://doc.akka.io/docs/akka/2.4/scala/http/">Akka-HTTP</a>

<ul>
<li>Taking the power of asynchronous, message based actors, and applying them to HTTP. Definite win.</li>
<li><a href="https://softwaremill.github.io/bootzooka/">Bootzooka</a> (<a href="https://github.com/softwaremill/bootzooka">GitHub</a>)

<ul>
<li>&quot;Bootzooka is a simple application scaffolding project to allow quick start of development for modern, web based applications.&quot;</li>
<li>While not perfect, it&#39;s a decent implementation of a starter app, tying together some useful technologies.</li>
</ul></li>
</ul></li>
<li><a href="https://www.playframework.com/">Play Framework</a>

<ul>
<li>&quot;Play is a high-productivity Java and Scala web application framework that integrates the components and APIs you need for modern web application development.&quot;</li>
</ul></li>
<li><a href="https://github.com/airbnb/hypernova">Hypernova</a>

<ul>
<li>&quot;A service for server-side rendering your JavaScript views&quot;</li>
<li>While not a choice unto itself, this should help speed things up and keep your site nice and search engine friendly.</li>
</ul></li>
<li>You also have all of your other typical options

<ul>
<li><a href="https://www.ruby-lang.org/en/">Ruby</a>

<ul>
<li><a href="http://rubyonrails.org/">Ruby on Rails</a></li>
<li><a href="http://www.sinatrarb.com/">Sinatra</a></li>
<li><a href="https://nodejs.org/en/">Node</a></li>
<li><a href="http://expressjs.com/">Express</a>: &quot;Fast, unopinionated, minimalist web framework for Node.js&quot;</li>
<li><a href="https://www.meteor.com/">Meteor</a>: &quot;Meteor is an open source platform for web,</li>
<li><a href="http://noeticforce.com/best-nodejs-frameworks-for-web-and-app-development">&quot;Node.js Frameworks: The 10 Best for Web and Apps Development&quot; by noeticsunil</a>
mobile, and desktop.&quot;</li>
</ul></li>
<li><a href="https://www.python.org/">Python</a>

<ul>
<li><a href="https://www.djangoproject.com/">Django</a></li>
<li><a href="https://wiki.python.org/moin/WebFrameworks">Web Frameworks for Python</a></li>
</ul></li>
<li><a href="https://secure.php.net/">PHP</a>

<ul>
<li><a href="https://octobercms.com/">October</a>: &quot;October is a free, open-source, self-hosted CMS platform based on the Laravel PHP Framework. A simple and modular CMS that grows with you, with a precise and beautiful interface that comes as second nature.&quot;</li>
<li><a href="https://laravel.com/">Laravel</a></li>
</ul></li>
<li>etc</li>
</ul></li>
</ul>

<h2><a name="tooling"></a>Tooling</h2>

<p>With the crazy mix of technologies and steps involved in modern web app development, it makes a ton of sense to tie it all together with some automation.</p>

<ul>
<li><a href="https://webpack.github.io/">Webpack</a> (<a href="https://github.com/webpack/webpack">GitHub</a>)

<ul>
<li>&quot;Webpack is a bundler for modules. The main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.&quot;</li>
<li><a href="http://blog.andrewray.me/webpack-when-to-use-and-why/">&quot;Webpack: When To Use And Why&quot; by Andrew Ray</a></li>
<li><a href="https://github.com/webpack/less-loader">https://github.com/webpack/less-loader</a></li>
<li><a href="https://github.com/shakacode/bootstrap-loader">https://github.com/shakacode/bootstrap-loader</a></li>
</ul></li>
<li><a href="http://gulpjs.com/">Gulp</a> (<a href="https://github.com/gulpjs/gulp">GitHub</a>

<ul>
<li>Gulp is a streaming javascript task runner that lets you automate tasks.</li>
</ul></li>
<li><a href="http://gruntjs.com/">Grunt</a> (<a href="https://github.com/gruntjs/">GitHub</a>)

<ul>
<li>Grunt is basically the older, less streaming, less awesome version of Gulp.</li>
</ul></li>
</ul>

<p>While a little different in purpose to the things mentioned above, getting everything nicely tested and deployed is always good:</p>

<ul>
<li><a href="https://bitbucket.org/product/features/pipelines">Bitbucket Pipelines</a>: &quot;Build, test and deploy from Bitbucket&quot;</li>
</ul>

<h2><a name="conclusions"></a>Conclusions</h2>

<p>Hopefully this has given you a decent starting point for figuring out what combination of technologies is going to work best for your next project. If you want to see the direction I&#39;ve decided to go, make sure you read on in <a href="#TODO">Part 2</a>.</p>

<p>Have I missed something important? Not given love to your favourite stack? Got a cool pointer? Or just want to say hi? Let me know in the comments!</p>

	  ]]></description>
	</item>


</channel>
</rss>
