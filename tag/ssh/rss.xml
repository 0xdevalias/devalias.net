<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>devalias.net</title>
   
   <link>http://devalias.net</link>
   <description>Follow me into the rabbit hole that is my mind and learn about topics including.. security, technology, efficiency, biohacking, health, personal growth and probably a whole lot more.
</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Plesk - Adding wget/tar/gzip/chmod/php/curl/clear to a chrooted SSH</title>
	  <link>/devalias/2013/09/19/plesk-adding-wget-tar-gzip-chmod-php-curl-clear-to-a-chr/</link>
	  <author>devalias</author>
	  <pubDate>2013-09-19T08:00:00+10:00</pubDate>
	  <guid>/devalias/2013/09/19/plesk-adding-wget-tar-gzip-chmod-php-curl-clear-to-a-chr/</guid>
	  <description><![CDATA[
	     <p>(<strong>tl;dr</strong> How to setup wget, tar, gzip, chmod, php and curl in a chrooted environment for Plesk.)</p>

<p>So those of you that have been around for a while (or read back through the archive) will know that a while ago I posted <a href="/post/15535429513/plesk-adding-programs-to-a-chrooted-ssh">Plesk - Adding programs to a chrooted SSH</a>, giving a few hints and tips about configuring a chrooted environment in Plesk.</p>

<p>Today I bring you a few more little tidbits to help you out with adding <em>wget, tar, gzip and chmod</em> to your Plesk chroot&#39;d environment. I followed these steps recently in helping a client get their new site up and running.</p>

<p><strong>Edit:</strong> So it turns out Parallels has an <a href="http://kb.odin.com/en/115842">updated script called chroot_update.sh</a> which makes this even easier again (yay for easy!) So I will show you how do use that for PHP and curl (at the bottom).</p>

<h2>Using chroot_update.sh</h2>

<p>Adding programs to chroot is made MUCH easier now with the <a href="http://kb.odin.com/en/115842">chroot_update.sh</a> script from Parallels.</p>

<p>To setup/update the initial chroot environment</p>
<div class="highlight"><pre><code class="language-" data-lang="">./chroot_update.sh --update
</code></pre></div>
<p>To add a new program (and it&#39;s dependent shared libraries)</p>
<div class="highlight"><pre><code class="language-" data-lang="">./chroot_update.sh --add /path/to/programname
</code></pre></div>
<p>or</p>
<div class="highlight"><pre><code class="language-" data-lang="">./chroot_update.sh --add `which programname`
</code></pre></div>
<p>Then to update each sites individual chroot folder</p>
<div class="highlight"><pre><code class="language-" data-lang="">./chroot_update.sh --apply all
</code></pre></div>
<p>If you find there are some missing shared objects, figure out which ones are missing using ldd and copy them in to the chroot folder</p>
<div class="highlight"><pre><code class="language-" data-lang="">ldd /path/to/programname
cp /path/to/missingobject chroot/path/to/missingobject
./chroot_update.sh --apply all
</code></pre></div>
<h2>Wget</h2>

<p><a href="https://www.gnu.org/software/wget/">Wget</a> is an awesome little program for downloading files off the net. For anyone who has ever setup an install of some 3rd party program and had to individually upload each and every file, this is a lifesaver!</p>

<p>To find out where the wget executable is</p>
<div class="highlight"><pre><code class="language-" data-lang="">which wget
</code></pre></div>
<p>To check if it has any dependancies</p>
<div class="highlight"><pre><code class="language-" data-lang="">ldd `which wget`
</code></pre></div>
<p>This will probably give you a whole list of things, but it seems the only one we really need to worry about (at least that I did) was <em>libssl.so.6</em>. So we copy both it and the executable to the chroot template folder</p>
<div class="highlight"><pre><code class="language-" data-lang="">cp `which wget` /var/www/vhosts/chroot/bin
cp /lib64/libssl.so.6 /var/www/vhosts/chroot/lib64
</code></pre></div>
<p>And it&#39;s done! To update any sites already generated, checkout the <a href="/post/15535429513/plesk-adding-programs-to-a-chrooted-ssh">original article</a></p>

<h2>Tar</h2>

<p><a href="https://www.gnu.org/software/tar/">Tar</a> is the defacto standard for archiving/unarchiving files on *nix, so.. it&#39;s pretty useful.</p>

<p>To find out where the tar executable is</p>
<div class="highlight"><pre><code class="language-" data-lang="">which tar
</code></pre></div>
<p>To check if it has any dependancies</p>
<div class="highlight"><pre><code class="language-" data-lang="">ldd `which tar`
</code></pre></div>
<p>In my case, nothing needed here, so let&#39;s just copy the executable</p>
<div class="highlight"><pre><code class="language-" data-lang="">cp `which tar` /var/www/vhosts/chroot/bin
</code></pre></div>
<p>Done! Same as before, to update any sites already generated, checkout the <a href="/post/15535429513/plesk-adding-programs-to-a-chrooted-ssh">original article</a></p>

<h2>Gzip</h2>

<p><a href="http://www.gzip.org/">Gzip</a> let&#39;s you open gzip compressed files (funnily enough) It&#39;s also what <code>tar</code> calls when you tell it to extract a <code>.tar.gz</code> file.</p>

<p>To find out where the gzip executable is</p>
<div class="highlight"><pre><code class="language-" data-lang="">which gzip
</code></pre></div>
<p>To check if it has any dependancies</p>
<div class="highlight"><pre><code class="language-" data-lang="">ldd `which gzip`
</code></pre></div>
<p>In my case, nothing needed here, so let&#39;s just copy the executable</p>
<div class="highlight"><pre><code class="language-" data-lang="">cp `which gzip` /var/www/vhosts/chroot/bin
</code></pre></div>
<p>Done! Same as before, to update any sites already generated, checkout the <a href="/post/15535429513/plesk-adding-programs-to-a-chrooted-ssh">original article</a></p>

<h2>Chmod</h2>

<p><a href="https://en.wikipedia.org/wiki/Chmod">Chmod</a> let&#39;s you change permissions on files, kinda useful to be able to do.</p>

<p>To find out where the chmod executable is</p>
<div class="highlight"><pre><code class="language-" data-lang="">which chmod
</code></pre></div>
<p>To check if it has any dependancies</p>
<div class="highlight"><pre><code class="language-" data-lang="">ldd `which chmod`
</code></pre></div>
<p>In my case, nothing needed here, so let&#39;s just copy the executable</p>
<div class="highlight"><pre><code class="language-" data-lang="">cp `which chmod` /var/www/vhosts/chroot/bin
</code></pre></div>
<p>Done! Same as before, to update any sites already generated, checkout the <a href="/post/15535429513/plesk-adding-programs-to-a-chrooted-ssh">original article</a></p>

<h2>PHP</h2>

<p>Sticking to the <code>chroot_update.sh</code> method, installing php is easier than it would otherwise be, but there are still quite a few manual steps due to the dependencies of some of the shared libraries.</p>
<div class="highlight"><pre><code class="language-" data-lang="">./chroot_update.sh --add `which php`
cp -R /usr/lib64/php chroot/usr/lib64
./chroot_update.sh --add /usr/lib64/php/modules/gd.so
./chroot_update.sh --add /usr/lib64/php/modules/imap.so
./chroot_update.sh --add /usr/lib64/php/modules/mysql.so
./chroot_update.sh --add /usr/lib64/php/modules/pdo_mysql.so
./chroot_update.sh --add /usr/lib64/php/modules/pdo_sqlite.so
./chroot_update.sh --add /usr/lib64/php/modules/xsl.so
cp -R /usr/lib64/mysql/ chroot/usr/lib64
cp -R /etc/php.d chroot/etc
cp /etc/localtime chroot/etc/
cp -R /usr/share/zoneinfo chroot/usr/share/
./chroot_update.sh --apply all
</code></pre></div>
<p>Your mileage my vary depending on what modules you have installed, but the method is the same as above for other files. You may need to play around with some php.ini type settings to get things working, but it should be relatively straightforward.</p>

<h2>Curl</h2>

<p>Sticking to the <code>chroot_update.sh</code> method, installing curl is really simple</p>
<div class="highlight"><pre><code class="language-" data-lang="">./chroot_update.sh --add `which curl`
./chroot_update.sh --apply all
</code></pre></div>
<h2>Clear</h2>

<p>Sticking to the <code>chroot_update.sh</code> method, installing clear is really simple</p>
<div class="highlight"><pre><code class="language-" data-lang="">./chroot_update.sh --add `which clear`
./chroot_update.sh --apply all
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>How to SSH to iPhone/iPad/iDevice via USB</title>
	  <link>/devalias/2013/03/07/how-to-ssh-to-iphone-via-usb/</link>
	  <author>devalias</author>
	  <pubDate>2013-03-07T08:38:49+11:00</pubDate>
	  <guid>/devalias/2013/03/07/how-to-ssh-to-iphone-via-usb/</guid>
	  <description><![CDATA[
	     <p>So in order to run the iPad through a debug proxy (Burp Suite), and still be able to forward on the traffic to the net, I needed to be able to talk to it over USB. (yay limited tech to work with!)</p>

<p>This wasn&#39;t actually too hard to get going thanks to a little tool called usbmuxd.</p>

<h2>Process</h2>

<ol>
<li>Install usbmuxd (i did this through homebrew: brew install libmuxd)</li>
<li>Startup the included iproxy tool (<code>iproxy LOCAL_PORT DEVICE_PORT)iproxy 2222 22</code>)</li>
<li>Plug in your iDevice (I assume you already have SSH setup on it and enabled)
SSH to localhost:LOCAL_PORT, making sure to specify the account you want to logon as <code>ssh root@127.0.0.1 -p 2222</code></li>
<li>???</li>
<li>Profit!</li>
</ol>

<p>Yay for things just working how they should!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Plesk - Adding programs to a chrooted SSH</title>
	  <link>/devalias/2012/01/10/plesk-adding-programs-to-a-chrooted-ssh/</link>
	  <author>devalias</author>
	  <pubDate>2012-01-10T05:29:00+11:00</pubDate>
	  <guid>/devalias/2012/01/10/plesk-adding-programs-to-a-chrooted-ssh/</guid>
	  <description><![CDATA[
	     <p>Just a few notes today about making programs (in this case git) available to a chrooted SSH account in Plesk. I&#39;m assuming the account is already setup for ssh, etc so I will just be covering where to copy the files to.</p>

<p><strong>Note:</strong> If you are here about getting an <code>execv(&quot;/bin/bash&quot;)</code> failed error, check Appendix B</p>

<h2>Location</h2>

<ul>
<li><code>/usr/local/bin</code> - The git bin files we will be copying.</li>
<li><code>/usr/local/share/git-core</code> - The shared git-core files.</li>
<li><code>/var/www/vhosts/chroot</code> - The base directory for chroot accessible programs.</li>
</ul>

<h2>Copying Git</h2>

<p>Firstly you will want to locate the git files. The easiest way to do this is by typing:</p>
<div class="highlight"><pre><code class="language-" data-lang="">which git
</code></pre></div>
<p>This should tell you the path to git (in my case /usr/local/bin) Next we want to copy the files over to the equivalent path in the chroot directory (/path/to/chroot/usr/local/bin)</p>
<div class="highlight"><pre><code class="language-" data-lang="">cp -R /usr/local/bin/git* /var/www/vhosts/chroot/usr/local/bin
</code></pre></div>
<p>In the case of git, we also want to copy over some other files</p>
<div class="highlight"><pre><code class="language-" data-lang="">cp -R /usr/local/share/git-core /var/www/vhosts/chroot/usr/local/share/git-core
cp -R /usr/local/libexec /var/www/vhosts/chroot/usr/local/libexec/git-core
</code></pre></div>
<p><strong>Note:</strong> The libexec files are quite large (100&#39;s of mb) so you may want to consider doing this in a better way.</p>

<h2>Updating chroot&#39;d directories</h2>

<p>The final (rather simple) step involves updating any chrooted directories that have already been created. This can be done by running the <code>recreate_chroot_env.sh</code> script (downloadable from <a href="http://kb.parallels.com/818">http://kb.parallels.com/818</a>)</p>

<p>This can also be done without the script:</p>

<p><code>
/usr/local/psa/admin/sbin/chrootmng --remove --source=/var/www/vhosts/chroot --target=/var/www/vhosts/&lt;domain name&gt;
/usr/local/psa/admin/sbin/chrootmng --create --source=/var/www/vhosts/chroot --target=/var/www/vhosts/&lt;domain name&gt;
</code>`</p>

<p><strong>Thats it!!</strong></p>

<p>Now when you login to your chrooted account you should be able to use git. I might add the required files for some more programs as I find the need to add them.</p>

<h2>Appendix A: Files required for ftp</h2>

<ul>
<li><code>/usr/bin/ftp</code> -&gt; <code>chroot/bin</code></li>
<li><code>/usr/lib64/libreadline.so.5</code> -&gt; <code>chroot/lib/libreadline.so.5</code></li>
<li><code>/usr/lib64/libncurses.so.5</code> -&gt; <code>chroot/lib/libncurses.so.5</code></li>
<li><code>/etc/services</code> -&gt; <code>chroot/etc/services</code></li>
</ul>

<h2>Appendix B: execv(&quot;/bin/bash&quot;) failed</h2>

<p>One cause of this occuring is due to the bin files for a chrooted directory not exisiting/being properly setup. This can be fixed by following the instructions in Updating chroot&#39;d directories above.. or if you&#39;re too lazy to scroll (like me)</p>
<div class="highlight"><pre><code class="language-" data-lang="">/usr/local/psa/admin/sbin/chrootmng --remove --source=/var/www/vhosts/chroot --target=/var/www/vhosts/&lt;domain name&gt;
/usr/local/psa/admin/sbin/chrootmng --create --source=/var/www/vhosts/chroot --target=/var/www/vhosts/&lt;domain name&gt;
</code></pre></div>
	  ]]></description>
	</item>


</channel>
</rss>
